<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>兰志远</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-23T03:16:52.165Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>前端</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue知识点</title>
    <link href="http://yoursite.com/2019/05/23/vue%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2019/05/23/vue知识点/</id>
    <published>2019-05-23T03:14:55.000Z</published>
    <updated>2019-05-23T03:16:52.165Z</updated>
    
    <content type="html"><![CDATA[<p>1.搭建环境使用vue-cli创建一个项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install --global vue-cli   //全局安装vue-cli</span><br><span class="line">vue init webpack app  //创建一个app的项目(app为项目名称自己定义)</span><br><span class="line">cd app  //进入项目</span><br><span class="line">npm install  //安装依赖</span><br><span class="line">npm run dev  //运行项目</span><br><span class="line">npm run build  //打包项目</span><br></pre></td></tr></table></figure><p>2.vue的声明周期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">beforeCreate  //实例创建前</span><br><span class="line">created  //实例创建后</span><br><span class="line">beforeMount  //挂载前</span><br><span class="line">mounted  //挂载后</span><br><span class="line">beforeUpdate  //更新前</span><br><span class="line">updated  //更新后</span><br><span class="line">beforeDestroy  //销毁前</span><br><span class="line">destroyed  //销毁后</span><br></pre></td></tr></table></figure><p>3.条件渲染</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">v-if &amp;&amp; v-else  //只有v-if表达式成立才会渲染v-if否则渲染v-else</span><br><span class="line">&lt;p v-if=&apos;true&apos;&gt;显示&lt;/p&gt;</span><br><span class="line">&lt;p v-else&gt;不显示&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">v-if &amp;&amp; v-else-if &amp;&amp; v-else  //可以连续使用v-else-if，v-else必须放在最后</span><br><span class="line">&lt;p v-if=&apos;type==&quot;a&quot;&apos;&gt;a&lt;/p&gt;</span><br><span class="line">&lt;p v-else-if=&apos;type==&quot;b&quot;&apos;&gt;b&lt;/p&gt;</span><br><span class="line">&lt;p v-else=&apos;type==&quot;c&quot;&apos;&gt;c&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">v-show  //v-show和v-if可以实现同样的效果，但是不同的是v-if不会渲染dom元素，v-show会渲染元素，增加了display:none属性</span><br><span class="line">&lt;p v-show=&quot;true&quot;&gt;显示&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>4.列表渲染</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=&quot;(item,index) in arr&quot; :key=&quot;index&quot;&gt;&#123;&#123;item.id&#125;&#125;&lt;/li&gt;</span><br><span class="line">arr : 要循环的数据(数组)</span><br><span class="line">item : 当前循环的元素</span><br><span class="line">index : 当前循环的下标</span><br><span class="line">key : 每一个元素的标识</span><br></pre></td></tr></table></figure><p>5.事件修饰符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 阻止单击事件继续传播 --&gt;</span><br><span class="line">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class="line">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只有修饰符 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span><br><span class="line">&lt;!-- 即元素自身触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span><br><span class="line">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span><br><span class="line">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span><br><span class="line">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>6.nginx解决路由mode为history为404问题</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">     <span class="attribute">root</span> /home/ubuntu/myproject/view/video/dist;</span><br><span class="line">     <span class="attribute">index</span> index.html;</span><br><span class="line">     //下边代码是解决404问题</span><br><span class="line">     <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.vue路由懒加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">component : resolve =&gt; require([&apos;path&apos;],resolve)</span><br><span class="line">path : 路径(../components/js.vue)</span><br></pre></td></tr></table></figure><p>8.proxyTable解决跨域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用vue-cli解决本地开发跨域的问题  配置文件在config/index文件</span></span><br><span class="line"><span class="comment">//配置前请求示例</span></span><br><span class="line">axios.get(<span class="string">'http://localhost:3000/test'</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(res)&#125;)  <span class="comment">//这样会提示跨域</span></span><br><span class="line"><span class="comment">//配置文件如下</span></span><br><span class="line">proxyTable : &#123;</span><br><span class="line">  <span class="string">'/api'</span> : &#123;</span><br><span class="line">        target : <span class="string">'http://localhost:3000'</span>,<span class="comment">//需要代理的域名和端口号，下次请求/api会代替当前的域名和端口</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>,  <span class="comment">//是否跨域</span></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">'^/api'</span>: <span class="string">'/'</span>   <span class="comment">//需要代理到的地址</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//配置后请求示例</span></span><br><span class="line">axios.get(<span class="string">'/api/test'</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(res)&#125;)  <span class="comment">//不会提示跨域</span></span><br><span class="line"><span class="comment">//解决完毕</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.搭建环境使用vue-cli创建一个项目&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>linux常用命令</title>
    <link href="http://yoursite.com/2019/05/15/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/05/15/linux常用命令/</id>
    <published>2019-05-15T07:34:26.000Z</published>
    <updated>2019-05-17T08:07:24.218Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux常用命令"><a href="#linux常用命令" class="headerlink" title="linux常用命令"></a>linux常用命令</h2><h4 id="切换工作目录-cd-目录名字"><a href="#切换工作目录-cd-目录名字" class="headerlink" title="切换工作目录 : cd 目录名字"></a>切换工作目录 : cd 目录名字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd test    //切换到test目录  </span><br><span class="line">cd /home   //也可以是绝对路径 </span><br><span class="line">cd    //不填加参数默认切换用户家目录</span><br></pre></td></tr></table></figure><h4 id="查看当前工作目录"><a href="#查看当前工作目录" class="headerlink" title="查看当前工作目录"></a>查看当前工作目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd     //pwd命令来查看当前的工作目录</span><br></pre></td></tr></table></figure><h4 id="查看当前目录下文件夹和文件"><a href="#查看当前目录下文件夹和文件" class="headerlink" title="查看当前目录下文件夹和文件"></a>查看当前目录下文件夹和文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ls    //ls命令可以查看当前文件夹和文件  隐藏文件不会显示</span><br><span class="line">    参数 ：</span><br><span class="line">    ls -a : 可以查看隐藏文件 通常是以点开头的</span><br><span class="line">    ls -R : 可以查看当前目录下包括子目录的文件</span><br><span class="line">    ls -F : 可以分辨文件夹还是文件&quot;/&quot;结尾都是文件夹</span><br><span class="line">    ls -l : 可以查看文件或文件夹的详细信息</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>简介</th><th>例子</th></tr></thead><tbody><tr><td>-a</td><td>可以查看隐藏文件 通常是以点开头的</td><td>ls -a</td></tr><tr><td>-R</td><td>可以查看当前目录下包括子目录的文件</td><td>ls -R</td></tr><tr><td>-F</td><td>可以分辨文件夹还是文件”/“结尾都是文件夹</td><td>ls -F</td></tr><tr><td>-l</td><td>可以查看文件或文件夹的详细信息</td><td>ls -l</td></tr></tbody></table><h4 id="过滤输出列表"><a href="#过滤输出列表" class="headerlink" title="过滤输出列表"></a>过滤输出列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这个过滤器就是一个进行简单文本匹配的字符串。可以在要用的命令行参数之后添加这个过滤器</span><br><span class="line">    ?:代表单个字符</span><br><span class="line">        问号可用于过滤器字符串中替代任意位置的单个字符：比如java</span><br><span class="line">    可以这样写：ls -l ja?a   </span><br><span class="line">    *:代表零个或多个字符:比如linux</span><br><span class="line">    可以这样写：ls -l lin*    //这样就会输出匹配到的文件夹或文件</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>简介</th><th>例子</th><th>备注</th></tr></thead><tbody><tr><td>?</td><td>问号可用于过滤器字符串中替代任意位置的单个字符</td><td>ls -l jav?a</td><td>比如查找java中a忘记的话可以是用？来替a去匹配查找</td></tr><tr><td>*</td><td>代表零个或多个字符</td><td>ls -l ja*</td><td>这样就去查找ja开头的所有文件或文件夹</td></tr><tr><td>[ab]</td><td>中括号表示特定位置上可能出现的两种字符:a或b</td><td>ls -l t[ab]s</td><td>这样的话就查找tas或者tbs</td></tr><tr><td>[a-z]</td><td>这个表示按字母范围去匹配</td><td>ls -l j[a-z]va</td><td>去查找a-z范围之间符合条件的</td></tr></tbody></table><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch 文件名+后缀名    //touch命令可以穿件任意格式的文件</span><br></pre></td></tr></table></figure><h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp source destination //source为源对象  destination为目标对象</span><br></pre></td></tr></table></figure><p><em>当source和destination都是文件名的时候，cp命令将源文件复制成一个新的文件，并以destination命名，新的文件就像全新的文件一样，有新的修改时间</em></p><p><em>目标对象也可以是个文件夹比如绝对路径cp -i test.txt /home相对路径cd -i test.txt ./home</em></p><table><thead><tr><th>参数</th><th>简介</th><th style="text-align:center">例子</th><th>备注</th></tr></thead><tbody><tr><td>-i</td><td>强制shell询问是否需要覆盖已有文件</td><td style="text-align:center">cp -i test.txt test1.txt</td><td>如果已经有了text1.text将会让你输入y/n输入y则覆盖输入n则取消</td></tr><tr><td>-R</td><td>递归复制整个目录</td><td style="text-align:center">cp -R java/ java2</td><td>赋值一个新的java2目录包括里边的文件</td></tr></tbody></table><h4 id="移动文件或重命名文件"><a href="#移动文件或重命名文件" class="headerlink" title="移动文件或重命名文件"></a>移动文件或重命名文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mv test.txt test1.txt  //这个命令会将test.txt重命名为test1.txt  只会影响文件名字不会影响时间</span><br><span class="line">mv test.txt ./java  //将test文件移动到当前目录下java文件夹内 也只会影响名字</span><br><span class="line">mv test.txt ./linux/test1.txt  //这个命令是移动文件并重命名</span><br><span class="line">语法：mv source destination  //source需要操作的源对象  destination要修改的文件名或者移动的目录</span><br></pre></td></tr></table></figure><p><em>这个命令对文件和文件夹都是可以的，只会对位置和文件名可以发生变化，对时间不会有影响的</em></p><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -i test.txt  //这个命令会删除test文件  这个命令也是可以使用通配符</span><br><span class="line">rm -i te?t.txt  //会询问你匹配到所有符合条件的</span><br></pre></td></tr></table></figure><p><em>可以不加-i加上删除的时候回询问你是不是删除，不加则不提示，文件一但删除是找不回的</em></p><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir test   //这个命令会创建一个test文件夹</span><br><span class="line">mkdir -p test/java/java2/  //-p参数是创建多层目录 不加-p会报错</span><br></pre></td></tr></table></figure><h4 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rmdir test  //这个命令删除test目录 注意：这个只可以删除空目录如果里边还有文件或文件夹是删不掉的</span><br><span class="line">rm -ri test  //这个命令会递归删除test目录包括下边是存在文件或文件夹的</span><br><span class="line">rm -rf test  //这个命令是强制递归删除所有文件 注意：没有提示请谨慎使用</span><br></pre></td></tr></table></figure><h4 id="查看文件类型编码"><a href="#查看文件类型编码" class="headerlink" title="查看文件类型编码"></a>查看文件类型编码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file test.txt  //这个命令可以查看文件的编码格式</span><br></pre></td></tr></table></figure><h4 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat test.txt  //这个命令可以查看文件内容</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>简介</th><th>例子</th></tr></thead><tbody><tr><td>-n</td><td>所有的行加上行号</td><td>cat -n test.txt</td></tr><tr><td>-b</td><td>给有文本的行加上行号</td><td>cat -b test.txt</td></tr><tr><td>-T</td><td>禁止制表符出现</td><td>cat -T test.txt</td></tr></tbody></table><h4 id="查看大文件内容"><a href="#查看大文件内容" class="headerlink" title="查看大文件内容"></a>查看大文件内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less test.txt  //less命令可以查看大文件的内容可以进行翻页</span><br></pre></td></tr></table></figure><h4 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps   //使用这个命令可以查看所有进程</span><br><span class="line">ps -ef //这个命令可以查看系统上所有运行的进程</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>简介</th></tr></thead><tbody><tr><td>UID</td><td>启动这些进程的用户</td></tr><tr><td>PID</td><td>进程的进程ID</td></tr><tr><td>PPID</td><td>父进程的进程号</td></tr><tr><td>C</td><td>进程生命周期中的CPU利用率</td></tr><tr><td>STIME</td><td>进程启动时的系统时间</td></tr><tr><td>TTY</td><td>进程启动时的终端</td></tr><tr><td>TIME</td><td>运行进程需要的累积cpu时间</td></tr><tr><td>CMD</td><td>启动的程序名称</td></tr></tbody></table><h4 id="实时监测进程"><a href="#实时监测进程" class="headerlink" title="实时监测进程"></a>实时监测进程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top  //这个命令可以看到实时的进程</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>简介</th></tr></thead><tbody><tr><td>PID</td><td>进程的ID</td></tr><tr><td>USER</td><td>进程属主的名字</td></tr><tr><td>PR</td><td>进程的优先级</td></tr><tr><td>NI</td><td>进程的谦让度值</td></tr><tr><td>VIRT</td><td>进程占用的虚拟内存总量</td></tr><tr><td>RES</td><td>进程占用的物理内存总量</td></tr><tr><td>SHR</td><td>进程和其他进程共享的内存总量</td></tr><tr><td>S</td><td>进程的状态</td></tr><tr><td>%CPU</td><td>进程使用的CPU时间比例</td></tr><tr><td>%MEM</td><td>进程使用的内存占可用内存的比例</td></tr><tr><td>TIME+</td><td>自进程启动到目前为止的CPU时间总量</td></tr><tr><td>COMMAND</td><td>进程所对应的命令行名称</td></tr></tbody></table><h4 id="结束进程"><a href="#结束进程" class="headerlink" title="结束进程"></a>结束进程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill ID(PID)   //这个命令来结束进程</span><br></pre></td></tr></table></figure><p><em>kill命令可通过进程ID(PID)给进程发信号。默认情况下，kill命令会向命令行中列出的全部PID发送一个TERM信号。遗憾的是，你只能用进程的PID而不能用命令名，所以kill命令有 时并不好用 ，如果要强制终止”kill -s HUP 3940”</em></p><h4 id="killall命令"><a href="#killall命令" class="headerlink" title="killall命令"></a>killall命令</h4><p>killall命令非常强大，它支持通过进程名而不是PID来结束进程。killall命令也支持通配符，这在系统因负载过大而变得很慢时很有用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall http*   //结束了所有以http开头的进程</span><br></pre></td></tr></table></figure><h4 id="搜索数据"><a href="#搜索数据" class="headerlink" title="搜索数据"></a>搜索数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grep a test.txt  //grep命令会在输入或指定的文件中查找包含匹配指定模式的字符的行。grep的输出就是包含了 匹配模式的行</span><br><span class="line">grep a -v test.txt  //这个是进行反向搜索(输出不匹配该模式的行)，可加-v参数</span><br><span class="line">grep a -n test.txt  //如果要显示匹配模式的行所在的行号，可加-n参数</span><br><span class="line">grep a -c test.txt  //如果只要知道有多少行含有匹配的模式，可用-c参数</span><br><span class="line">grep -e a -e c test.txt //如果要指定多个匹配模式，可用-e参数来指定每个模式</span><br></pre></td></tr></table></figure><h4 id="history命令"><a href="#history命令" class="headerlink" title="history命令"></a>history命令</h4><p><em>要查看最近用过的命令列表</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">history  //查看使用过的命令列表  通常会保存1000条命令</span><br><span class="line">!!  // 可以重用最近一条命令</span><br><span class="line">!编号  //可以重用列表中任意一条命令</span><br></pre></td></tr></table></figure><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd testuser  创建用户testuser  默认不会创建home目录</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>简介</th></tr></thead><tbody><tr><td>-c comment</td><td>给新用户添加备注</td></tr><tr><td>-d  home_dir</td><td>为主目录指定一个名字</td></tr><tr><td>-e  expire_date</td><td>用YYYY-MM-DD格式指定一个账户过期的日期</td></tr><tr><td>-f  inactive_days</td><td>指定这个账户密码过期后多少天账户被禁用;0表示密码一过期就立即禁用，1表示禁用这个功能</td></tr><tr><td>-g  initial_group</td><td>指定用户登录组的GID或组名</td></tr><tr><td>-G group …</td><td>指定用户除登录组之外所属的一个或多个附加组</td></tr><tr><td>-k</td><td>必须和-m一起使用，将/etc/skel目录的内容复制到用户的HOME目录</td></tr><tr><td>-m</td><td>创建用户的HOME目录</td></tr><tr><td>-M</td><td>不创建用户的HOME目录(当默认设置里要求创建时才使用这个选项)</td></tr><tr><td>-n</td><td>创建一个与用户登录名同名的新组</td></tr><tr><td>-r</td><td>创建系统账户</td></tr><tr><td>-p passwd</td><td>为用户账户指定默认密码</td></tr><tr><td>-s shell</td><td>指定默认的登录shell</td></tr><tr><td>-u uid</td><td>为账户指定唯一的UID</td></tr></tbody></table><h4 id="给创建用户设置密码"><a href="#给创建用户设置密码" class="headerlink" title="给创建用户设置密码"></a>给创建用户设置密码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd testuser    //可以和上一个命令一起设置</span><br></pre></td></tr></table></figure><h4 id="给用户设置shell"><a href="#给用户设置shell" class="headerlink" title="给用户设置shell"></a>给用户设置shell</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usermod -s /bin/bash 用户名</span><br><span class="line">//在root用户下操作</span><br></pre></td></tr></table></figure><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userdel testuser   //删除testuser账户   默认情况下，userdel命令会只 删除/etc/passwd文件中的用户信 息，而不会删除系统中属于该账户的任何文件</span><br><span class="line">userdel -r testuser  //如果加上-r参数，userdel会删除用户的HOME目录以及邮件目录</span><br></pre></td></tr></table></figure><p><em>在有大量用户的环境中使用-r参数时要特别小心。你永远不知道用户是否在其HOME目<br>录下存放了其他用户或其他程序要使用的重要文件。记住，在删除用户的HOME目录之<br>前一定要检查清楚!</em></p><h4 id="创建用户组"><a href="#创建用户组" class="headerlink" title="创建用户组"></a>创建用户组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd 组名  //这个命令来创建一个用户组</span><br></pre></td></tr></table></figure><h4 id="向用户组添加成员"><a href="#向用户组添加成员" class="headerlink" title="向用户组添加成员"></a>向用户组添加成员</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usermod -G 组名 用户名  //向组添加成员</span><br><span class="line">gpasswd -a 用户名 组名  //也可以使用</span><br></pre></td></tr></table></figure><p><em>如果更改了已登录系统账户所属的用户组，该用户必须登出系统后再登录，组关系的更<br>改才能生效</em></p><h4 id="移出用户组中某些的成员"><a href="#移出用户组中某些的成员" class="headerlink" title="移出用户组中某些的成员"></a>移出用户组中某些的成员</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpasswd -d 用户名 组名</span><br></pre></td></tr></table></figure><h4 id="查看用户组的成员"><a href="#查看用户组的成员" class="headerlink" title="查看用户组的成员"></a>查看用户组的成员</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep 组名 /etc/group</span><br></pre></td></tr></table></figure><h4 id="修改组名"><a href="#修改组名" class="headerlink" title="修改组名"></a>修改组名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod -n 新组名 原组名  //加上-n可以修改组名</span><br></pre></td></tr></table></figure><h4 id="删除用户组"><a href="#删除用户组" class="headerlink" title="删除用户组"></a>删除用户组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 组名  //不能删除用户初始组</span><br></pre></td></tr></table></figure><h4 id="查看用户所属组"><a href="#查看用户所属组" class="headerlink" title="查看用户所属组"></a>查看用户所属组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groups   //这个命令可以查看用户所属组</span><br><span class="line">groups 用户名  //这个命令和上边都是可以查看</span><br></pre></td></tr></table></figure><h4 id="文件权限符"><a href="#文件权限符" class="headerlink" title="文件权限符"></a>文件权限符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l  //这个命令在之前有提到过 是可以查看系统上文件、目录和设备的权限</span><br></pre></td></tr></table></figure><p> 输出结果的第一个字段就是描述文件和目录的权限编码，这个字段的第一个字符代表了对象的类型：</p><pre><code>-：代表文件d：代表目录l：代表链接c：代表字符型设备b：代表块设备n：代表网络设备</code></pre><p>之后有3组字符的编码，每一组定义了3种访问权限：</p><p>​    r：代表对象是可读的</p><p>​    w：代表对象是可写的</p><pre><code>x：代表对象是可执行的*注意：如果没有某种权限，在该权限位置会出现单破折线（-）*</code></pre><p>这三组权限分别对应对象的3个安全级别：</p><pre><code>对象的属主对象的属组系统其它的用户</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">drwxrwxr-x  9 lan  lan     4096 Sep 19 05:11 resume/  </span><br><span class="line">例如上面：</span><br><span class="line">d  代表这是一个文件夹</span><br><span class="line">rwx  代表属主有读取、写入和执行权限</span><br><span class="line">rwx  代表属组有读取、写入和执行权限</span><br><span class="line">r-x  代表其它用户有读取、执行权限，并没有写入权限</span><br></pre></td></tr></table></figure><h4 id="文件权限码"><a href="#文件权限码" class="headerlink" title="文件权限码"></a>文件权限码</h4><table><thead><tr><th>权限</th><th>二进制值</th><th>八进制值</th><th>描述</th></tr></thead><tbody><tr><td>—</td><td>000</td><td>0</td><td>没有任何权限</td></tr><tr><td>–x</td><td>001</td><td>1</td><td>只有执行权限</td></tr><tr><td>-w-</td><td>010</td><td>2</td><td>只有写入权限</td></tr><tr><td>-wx</td><td>011</td><td>3</td><td>只有写入和执行权限</td></tr><tr><td>r–</td><td>100</td><td>4</td><td>只有读取权限</td></tr><tr><td>r-x</td><td>101</td><td>5</td><td>有读取和执行权限</td></tr><tr><td>rw-</td><td>110</td><td>6</td><td>有读取和写入权限</td></tr><tr><td>rwx</td><td>111</td><td>7</td><td>有全部权限</td></tr></tbody></table><h4 id="更改权限"><a href="#更改权限" class="headerlink" title="更改权限"></a>更改权限</h4><p>八进制模式    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 权限码 文件   //这个命令命令用来改变文件和目录的安全性设置</span><br><span class="line">chmod -R 权限码 文件  //以让权限的改变递归地作用到文件和子目录</span><br></pre></td></tr></table></figure><p>符号模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[ugoa...][[+-=][rwxXstugo...]</span><br><span class="line">第一组：</span><br><span class="line">u：代表用户</span><br><span class="line">g：代表组</span><br><span class="line">o：代表其他</span><br><span class="line">a：代表上述所有</span><br><span class="line">第二组：</span><br><span class="line">表示你是想在现有的权限上增加权限(+)，还是在现有的权限基础上移出权限(-)，或是将权限设置成后面的值(=)</span><br><span class="line">第三组：</span><br><span class="line">代表作用到设置上的权限</span><br><span class="line">x：如果对象是目录或者它已有执行权限，赋予执行权限。</span><br><span class="line">s：运行时重新设置uid或gid</span><br><span class="line">t：保留文件或目录</span><br><span class="line">u：将权限设置为跟属主一样</span><br><span class="line">g：将权限设置为跟属组一样</span><br><span class="line">o：将权限设置为跟其他用户一样</span><br><span class="line">例子：chmod o+x a.txt   //给属主添加执行权限</span><br><span class="line"> chmod o-d a.txt   //给属主减去写入权限</span><br></pre></td></tr></table></figure><h4 id="改变所属关系"><a href="#改变所属关系" class="headerlink" title="改变所属关系"></a>改变所属关系</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown testuser a.txt  //更改a文件的新属主为testuser</span><br></pre></td></tr></table></figure><p><em>注意：只能在root用户下操作  -R递归改变子目录文件</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp lan a.txt   //更改a文件的新属组为lan</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown testuser.lan a.txt   //同事改变属组和属主</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp -R 用户组 文件名或目录名   //修改目录所属用户组</span><br></pre></td></tr></table></figure><p>​    </p><p>查看当前用户登录是谁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoami</span><br></pre></td></tr></table></figure><p>切换用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - 用户名</span><br></pre></td></tr></table></figure><p>从本地拷贝文件到服务器命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P 端口号 本地文件路径 用户名@ip:拷贝到服务器路径</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;linux常用命令&quot;&gt;&lt;a href=&quot;#linux常用命令&quot; class=&quot;headerlink&quot; title=&quot;linux常用命令&quot;&gt;&lt;/a&gt;linux常用命令&lt;/h2&gt;&lt;h4 id=&quot;切换工作目录-cd-目录名字&quot;&gt;&lt;a href=&quot;#切换工作目录-cd-目
      
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>vim快捷键</title>
    <link href="http://yoursite.com/2019/04/12/vim%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2019/04/12/vim快捷键/</id>
    <published>2019-04-12T02:35:32.000Z</published>
    <updated>2019-05-17T08:06:48.479Z</updated>
    
    <content type="html"><![CDATA[<h5 id="解决vi编辑文件是中文乱码问题"><a href="#解决vi编辑文件是中文乱码问题" class="headerlink" title="解决vi编辑文件是中文乱码问题"></a>解决vi编辑文件是中文乱码问题</h5><p>​    在用户目录下新建一个.vimrc文件在里边添加</p><p>​    :set encoding=utf-8</p><h5 id="进入插入模式"><a href="#进入插入模式" class="headerlink" title="进入插入模式"></a>进入插入模式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i   //当前行插入</span><br><span class="line">o   //另起一行插入</span><br></pre></td></tr></table></figure><h5 id="回到普通模式"><a href="#回到普通模式" class="headerlink" title="回到普通模式"></a>回到普通模式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esc</span><br></pre></td></tr></table></figure><h5 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">h  //左移一个字符</span><br><span class="line">j  //下移一行</span><br><span class="line">k  //上移一行</span><br><span class="line">l  //右移一个字符</span><br></pre></td></tr></table></figure><p><em>上下左右按键也是可以的</em></p><h5 id="下翻一屏"><a href="#下翻一屏" class="headerlink" title="下翻一屏"></a>下翻一屏</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PageDown或者Ctrl+F</span><br></pre></td></tr></table></figure><h5 id="上翻一屏"><a href="#上翻一屏" class="headerlink" title="上翻一屏"></a>上翻一屏</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PageUp或者ctrl+B</span><br></pre></td></tr></table></figure><h5 id="移动到缓冲区的最后一行"><a href="#移动到缓冲区的最后一行" class="headerlink" title="移动到缓冲区的最后一行"></a>移动到缓冲区的最后一行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">G</span><br></pre></td></tr></table></figure><h5 id="移动到缓冲区的第num行"><a href="#移动到缓冲区的第num行" class="headerlink" title="移动到缓冲区的第num行"></a>移动到缓冲区的第num行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num G</span><br></pre></td></tr></table></figure><h5 id="移动到缓冲区第一行"><a href="#移动到缓冲区第一行" class="headerlink" title="移动到缓冲区第一行"></a>移动到缓冲区第一行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gg</span><br></pre></td></tr></table></figure><h5 id="快速回到当前行的尾部"><a href="#快速回到当前行的尾部" class="headerlink" title="快速回到当前行的尾部"></a>快速回到当前行的尾部</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$</span><br></pre></td></tr></table></figure><h5 id="快速回到当前行行首"><a href="#快速回到当前行行首" class="headerlink" title="快速回到当前行行首"></a>快速回到当前行行首</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h5 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h5><p>按esc键在英文模式下按冒号键进入命令行模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q //退出</span><br><span class="line">q! //取消对缓冲区的修改并退出</span><br><span class="line">w  //保存</span><br><span class="line">wq //保存并退出</span><br></pre></td></tr></table></figure><h5 id="普通模式下常用编辑命令"><a href="#普通模式下常用编辑命令" class="headerlink" title="普通模式下常用编辑命令"></a>普通模式下常用编辑命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x   //删除当前光标所在位置的字符</span><br><span class="line">dd  //删除当前光标所在行</span><br><span class="line">dw  //删除光标所在位置的单词</span><br><span class="line">d$  //删除当前光标所在位置行尾的内容</span><br><span class="line">J   //删除当前光标所在行行尾的换行符(拼接行)</span><br><span class="line">u   //撤销前一编辑命令</span><br><span class="line">a   //在当前光标后追加数据</span><br><span class="line">A   //在当前光标所在行行尾追加数据</span><br><span class="line">r char //用char替换当前光标所在位置的单个字符</span><br><span class="line">R text //用text覆盖当前光标所在位置的数据，直到按下ESC键</span><br></pre></td></tr></table></figure><p><em>有些编辑命令允许使用数字修饰符来指定重复该命令多少次。比如，命令2x会删除从光标当<br>前位置开始的两个字符，命令5dd会删除从光标当前所在行开始的5行。</em></p><h5 id="复制和粘贴"><a href="#复制和粘贴" class="headerlink" title="复制和粘贴"></a>复制和粘贴</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p   //粘贴</span><br><span class="line">yw  //复制一个单词</span><br><span class="line">y$  //复制到行尾</span><br></pre></td></tr></table></figure><h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/查找关键字   //在普通模式下</span><br></pre></td></tr></table></figure><h5 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:s/old/new/   //old替换的单词，new需要替换的单词</span><br><span class="line">:s/old/new/g  //替换一行所有old</span><br><span class="line">:n,ms/old/new/g  //替换行号n和m之间所有old</span><br><span class="line">:%s/old/new/g  //替换整个文件中的所有old</span><br><span class="line">:%s/old/new/gc //替换整个文件中的所有old，但在每次出现时提示</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;解决vi编辑文件是中文乱码问题&quot;&gt;&lt;a href=&quot;#解决vi编辑文件是中文乱码问题&quot; class=&quot;headerlink&quot; title=&quot;解决vi编辑文件是中文乱码问题&quot;&gt;&lt;/a&gt;解决vi编辑文件是中文乱码问题&lt;/h5&gt;&lt;p&gt;​    在用户目录下新建一个.vi
      
    
    </summary>
    
    
      <category term="vim" scheme="http://yoursite.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu安装redis</title>
    <link href="http://yoursite.com/2019/04/01/ubuntu%E5%AE%89%E8%A3%85redis%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2019/04/01/ubuntu安装redis服务器/</id>
    <published>2019-04-01T06:33:45.000Z</published>
    <updated>2019-05-17T08:06:48.475Z</updated>
    
    <content type="html"><![CDATA[<p>安装redis服务器端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install redis-server</span><br></pre></td></tr></table></figure><p>检查redis服务器系统进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> ps -aux|grep redis</span><br><span class="line"> redis     7186  0.0  0.1  39144  3216 ?        Ssl  10:04   0:01 /usr/bin/redis-server *:6379</span><br><span class="line">ubuntu    9164  0.0  0.0  13204   940 pts/0    S+   10:27   0:00 grep --color=auto redis</span><br></pre></td></tr></table></figure><p>通过启动命令检查redis服务器状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -nlt|grep 6379</span><br><span class="line">tcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN</span><br><span class="line">tcp6       0      0 :::6379                 :::*                    LISTEN</span><br></pre></td></tr></table></figure><p>检查redis服务器状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/redis-server status</span><br></pre></td></tr></table></figure><p>访问redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>redis配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/redis/redis.conf</span><br><span class="line">1.设置密码(默认没有密码)</span><br><span class="line">#取消注释requirepass</span><br><span class="line">requirepaa test    //将密码设置为test</span><br><span class="line">----------------------------</span><br><span class="line">2.让Redis服务器被远程访问(默认只能被本机访问)</span><br><span class="line">#注释bind</span><br><span class="line">#bind 127.0.0.1</span><br><span class="line">----------------------------</span><br><span class="line">3.重启redis服务器</span><br><span class="line">sudo /etc/init.d/redis-server restart</span><br><span class="line">注意：redis-cli如果没有用密码登录的话是可以登录，但是不可以操作，使用密码登录加 -a 密码</span><br><span class="line">redis-cli -a pass</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装redis服务器端&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;c
      
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>mysql常用命令</title>
    <link href="http://yoursite.com/2019/03/15/myslq%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/03/15/myslq常用命令/</id>
    <published>2019-03-15T09:39:26.000Z</published>
    <updated>2019-05-24T07:51:03.869Z</updated>
    
    <content type="html"><![CDATA[<h4 id="myslq常用命令"><a href="#myslq常用命令" class="headerlink" title="myslq常用命令"></a>myslq常用命令</h4><p>mysql登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -h localhost -P3306 -u root -ppass;</span><br><span class="line">参数：</span><br><span class="line">h : 主机名  P : 端口号 u : 用户名 p : 密码</span><br></pre></td></tr></table></figure><p>修改数据库登录密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user &apos;用户名&apos;@&apos;localhost&apos; DENTIFIED BY &apos;新密码&apos;;</span><br></pre></td></tr></table></figure><p>查看所有数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p>查看所有表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><p>创建表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(字段名 字段类型,字段名 字段类型);</span><br></pre></td></tr></table></figure><p>查看表结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc table_name;</span><br></pre></td></tr></table></figure><p>切换数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 库名;</span><br></pre></td></tr></table></figure><p>查看当前所在数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select database();</span><br></pre></td></tr></table></figure><p>查看表所有数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table_name;</span><br></pre></td></tr></table></figure><p>创建数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database test;</span><br></pre></td></tr></table></figure><p>清空表数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate test;</span><br></pre></td></tr></table></figure><p>mysql端口查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -anp | grep mysql</span><br></pre></td></tr></table></figure><p>简单分页查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * from table limit(page-1)*size,size;</span><br><span class="line">/*page : 当前页数*/</span><br><span class="line">/*size : 每页的数量*/</span><br><span class="line">/*语法*/</span><br><span class="line">select * from 表名 limit 起始索引,查询个数;</span><br></pre></td></tr></table></figure><p>like操作符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select * from user where name like &apos;小%&apos;;</span><br><span class="line">/*查询user表 name字段 以小开头的数据*/</span><br><span class="line">select * from user where name like &apos;%小%&apos;;</span><br><span class="line">/*查询user表 name字段 包含小的数据*/</span><br><span class="line">select * from user where name like &apos;%小&apos;;</span><br><span class="line">/*查询user表 name字段 以小结尾的数据*/</span><br></pre></td></tr></table></figure><p>not like操作符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from user where name not like &apos;小%&apos;;</span><br><span class="line">/*查询user表 name字段 不是以小开头的数据*/</span><br></pre></td></tr></table></figure><p>IN操作符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from user where name IN(&apos;小红&apos;,&apos;小紫&apos;);</span><br><span class="line">/*从user表查询 name字段为IN里边的值*/</span><br></pre></td></tr></table></figure><p>or运算符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from user where score&gt;80 or gender=&apos;女&apos;;</span><br><span class="line">/*从user表查询 score大于80或者gender=女的数据，任意一条成立*/</span><br></pre></td></tr></table></figure><p>and运算符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from user where gender=&apos;女&apos; and score&gt;90;</span><br><span class="line">/*从user表查询gender=女,且score大于90的，两边同时成立*/</span><br></pre></td></tr></table></figure><p>合并查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from student,user where student.age=user.age;</span><br><span class="line">/*从student和user表中查询age相同的数据*/21.</span><br></pre></td></tr></table></figure><p>count()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from user where score&gt;80;</span><br><span class="line">/*从user表中查询满足条件score&gt;80的数量*/</span><br></pre></td></tr></table></figure><p>AVG()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select AVG(score) from user;</span><br><span class="line">/*从user表中查询score字段的平均值*/</span><br></pre></td></tr></table></figure><p>sum()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select sum(age) from user;</span><br><span class="line">/*查询user表中age的和*/</span><br></pre></td></tr></table></figure><p>min、max</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select min(age) from user; /*查询user表中age最小的*/</span><br><span class="line">select max(age) from user; /*查询user表中age最大的*/</span><br></pre></td></tr></table></figure><p>order by(排序)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * from user order by score;</span><br><span class="line">/*从user表查询数据根据score字段进行升序*/</span><br><span class="line">select * from user order by score desc;</span><br><span class="line">/*从user表查询数据根据score字段进行降序*/</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into user(name,age,score,gender) values(&apos;小红&apos;,18,90,&apos;女&apos;);</span><br><span class="line">/*向user表插入一条数据字段为user后边的 值为values后边的一一对应*/</span><br></pre></td></tr></table></figure><p>更新数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update user set score=61,age=17 where name=&apos;小红&apos;;</span><br><span class="line">/*更新user表名字为小红的score字段和age字段的值*/</span><br><span class="line">/*注意：如果没有where条件的话则所有数据的score和age字段都改变*/</span><br></pre></td></tr></table></figure><p>删除数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delete from user where name=&apos;小红&apos;;</span><br><span class="line">/*删除user表中name=小红的数据*/</span><br><span class="line">/*注意：没有where条件的话则删除表中所有数据*/</span><br></pre></td></tr></table></figure><p>between操作符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * from user where score between 60 and 80;</span><br><span class="line">/*查询user表score字段60-80范围的数据*/</span><br><span class="line">select * from user where score not between 60 and 80;</span><br><span class="line">/*查询user表score字段不在60-80范围的数据*/</span><br></pre></td></tr></table></figure><p>去重</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select distinct gender from user;</span><br><span class="line">/*查询user表gender字段只显示一次去重*/</span><br></pre></td></tr></table></figure><p>连接字段(concat)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select concat(name,age) as info from user;</span><br><span class="line">/*查询user表中的name和age字段并拼接成一个字段返回*/</span><br><span class="line">/*例如：小红18*/</span><br></pre></td></tr></table></figure><p>is null</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from user where name is null;</span><br><span class="line">/*查询user表中name字段为null的数据*/</span><br></pre></td></tr></table></figure><p>is not null</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from user where name is not null;</span><br><span class="line">/*查询user表中name字段不为null的数据*/</span><br></pre></td></tr></table></figure><p>if null</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select ifnull(age,0) from user;</span><br><span class="line">/*查询user表中的年龄如果字段为null则返回0*/</span><br></pre></td></tr></table></figure><p>length</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select length(name) from user;</span><br><span class="line">/*查询name字段的字节个数*/</span><br></pre></td></tr></table></figure><p>upper、lower</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select upper(&apos;a&apos;);</span><br><span class="line">/*转大写*/</span><br><span class="line">select lower(&apos;A&apos;)</span><br><span class="line">/*转小写*/</span><br></pre></td></tr></table></figure><p>substr(截取)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select substr(&apos;lanzhiyuan&apos;,2,1);</span><br><span class="line">/*select substr(&apos;截取的字段&apos;,&apos;截取的开始位置&apos;,&apos;截取的数量&apos;) 注意：mysql索引从1开始*/</span><br></pre></td></tr></table></figure><p>instr</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select instr(&apos;lanzhiyuan&apos;,&apos;zhi&apos;);</span><br><span class="line">/*查询第二个参数在第一个参数中的起始索引,查不到则返回0*/</span><br></pre></td></tr></table></figure><p>trim</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select trim(&apos;  lan  &apos;);</span><br><span class="line">/*去除前后空格*/</span><br><span class="line">select trim(&apos;a&apos; from &apos;aaaalanaaaa&apos;);</span><br><span class="line">/*去除前后指定字符(a)*/</span><br></pre></td></tr></table></figure><p>lpad、rpad(填充指定个数字符)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select lpad(&apos;lan&apos;,5,&apos;*&apos;);</span><br><span class="line">/*向左填充指定长度指定字符*/</span><br><span class="line">select rpad(&apos;lan&apos;,5,&apos;*&apos;);</span><br><span class="line">/*向右填充指定长度指定字符*/</span><br><span class="line">/*如果长度小于字段长度则从右截取*/</span><br></pre></td></tr></table></figure><p>replace</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select replace(&apos;lanzhiyuan&apos;,&apos;an&apos;,&apos;**&apos;);</span><br><span class="line">/*将第一个参数中的an全部替换为第三个参数*/</span><br></pre></td></tr></table></figure><p>round(四舍五入)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select round(1.56,2)</span><br><span class="line">/*第一个参数是要四舍五入的字段，第二个参数是小数点后保留的位数，默认取整*/</span><br></pre></td></tr></table></figure><p>ceil(向上取整)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select clil(1.2);</span><br><span class="line">/*向上取整*/</span><br></pre></td></tr></table></figure><p>floor(向下取整)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select floor(1.2);</span><br><span class="line">/*向下取整*/</span><br></pre></td></tr></table></figure><p>truncate(截断)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select truncate(1.2222,1)</span><br><span class="line">/*小数点后保留一位*/</span><br></pre></td></tr></table></figure><p>mod(取余)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select mod(10,3);</span><br><span class="line">/*取余数*/</span><br></pre></td></tr></table></figure><p>now(当前时间+日期)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select now();</span><br><span class="line">/*返回当前时间包含时间*/</span><br></pre></td></tr></table></figure><p>curdate(当前日期)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select curdate();</span><br><span class="line">/*返回当前日期不包括时间*/</span><br></pre></td></tr></table></figure><p>curtime</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select curtime();</span><br><span class="line">/*返回当前时间不包含日期*/</span><br></pre></td></tr></table></figure><p>日期格式字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">%Y --- 四位年份 1998</span><br><span class="line">%y --- 2位年份 98</span><br><span class="line">%m --- 月份(01、02...)</span><br><span class="line">%c --- 月份(1、2...)</span><br><span class="line">%d --- 日(01、02...)</span><br><span class="line">%H --- 小时(24小时制)</span><br><span class="line">%h --- 小时(12小时制)</span><br><span class="line">%i --- 分钟</span><br><span class="line">%s --- 秒</span><br></pre></td></tr></table></figure><p>str_to_date</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select str_to_date(&apos;9-13-1999&apos;,&apos;%m-%d-%Y&apos;);</span><br><span class="line">/*将字符转换成指定格式的日期*/</span><br></pre></td></tr></table></figure><p>data_format</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select data_format(date,&apos;%y-%m-%d&apos;);</span><br><span class="line">/*将指定日期转换为字符*/</span><br></pre></td></tr></table></figure><p>if函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select name,age,if(score is null,&apos;无&apos;,&apos;有&apos;) from student;</span><br><span class="line">/*如果score字段是null则返回无否则返回有*/</span><br></pre></td></tr></table></figure><p>case函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/*第一种情况*/</span><br><span class="line">select age,name,case age when 18 age*1.1 when 20 then age*1.2 else age end as new_age from user;</span><br><span class="line">/*如果age等于18返回age*1.1，如果等于20返回age*1.2,否则返回age*/</span><br><span class="line"></span><br><span class="line">/*第二种情况*/</span><br><span class="line">select name,age,score, case  when score &gt; 90 then &apos;优秀&apos; when score &gt; 60 then &apos;及格&apos; else &apos;不及格&apos; end as 成绩级别 from student;</span><br><span class="line">/*如果成绩大于90显示优秀，大于60显示及格，否则显示不合格*/</span><br><span class="line">/*</span><br><span class="line">区别：case 后边加变量和不加变量，和后边返回值或者表达式</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>group by</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select max(age),gender from user group by gender;</span><br><span class="line">/*以gender字段进行分组查询，查询年龄最大的*/</span><br></pre></td></tr></table></figure><p>having</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select count(*),gender from user group by gender having count(*)&gt;10;</span><br><span class="line">/*以gender字段进行分组查询，返回查询个数大于10的，进行分组后的条件筛选*/</span><br></pre></td></tr></table></figure><p>等值连接(sql99语法)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select student_name,teacher_name from student s inner join teacher t on s.id = t.id;</span><br><span class="line">/*查询学生名字和对应老师的名字*/</span><br><span class="line">/*语法：*/</span><br><span class="line">select 查询字段 from 表名 inner join 表2 on 连接条件 inner join 表3 on 连接条件 where 筛选条件(可省略) group by 分组(可省略) order by 排序(可省略)。。。</span><br><span class="line">/*inner可省略*/</span><br></pre></td></tr></table></figure><p>外连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select s.name from student s left outer join teacher t on s.teacher_id = t.teacher_id where t.id is null;</span><br><span class="line">/*查询没有老师的学生名字，left左边为主表，右外连接则相反*/</span><br></pre></td></tr></table></figure><p>标量子查询(一行一列)</p><p>案例1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from student where age &gt; (select age from student where name = &apos;小明&apos;);</span><br><span class="line">/*从student表中查询比小明年龄大的同学*/</span><br></pre></td></tr></table></figure><p>案例2(多条子查询)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from student where score &gt; (select score from student where name = &apos;小明&apos;) and age &gt; (select age from student where name = &apos;小明&apos;);</span><br><span class="line">/*从student中查询成绩大于小明并且年龄大于小明的同学*/</span><br></pre></td></tr></table></figure><p>案例3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select name,score from student where score = (select min(score) from student);</span><br><span class="line">/*从student表中查询成绩最低的同学名字和成绩*/</span><br></pre></td></tr></table></figure><p>列子查询(多行子查询)</p><p>案例1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select name from student where teacher_id in (select teacher_id from teacher where teacher_id in (1,4))</span><br><span class="line">/*查询老师id为4和1的所有学生姓名*/</span><br></pre></td></tr></table></figure><p>案例2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select t.*,(select count(*) from student s where s.teacher_id = t.teacher_id) count from teacher t;</span><br><span class="line">/*查询每个老师的信息包含每个老师的学生个数 select后子查询*/</span><br></pre></td></tr></table></figure><p>提示：子查询可以放在select、from、where、having、in、all等后边</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;myslq常用命令&quot;&gt;&lt;a href=&quot;#myslq常用命令&quot; class=&quot;headerlink&quot; title=&quot;myslq常用命令&quot;&gt;&lt;/a&gt;myslq常用命令&lt;/h4&gt;&lt;p&gt;mysql登录&lt;/p&gt;
&lt;figure class=&quot;highlight plain
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>js继承几种方式</title>
    <link href="http://yoursite.com/2018/08/13/js%E7%BB%A7%E6%89%BF%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/08/13/js继承几种方式/</id>
    <published>2018-08-13T09:39:26.000Z</published>
    <updated>2018-09-05T07:07:35.502Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1.原型链继承"></a>1.原型链继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name || <span class="string">'小红'</span></span><br><span class="line">        <span class="keyword">this</span>.age = age || <span class="number">15</span></span><br><span class="line">        <span class="keyword">this</span>.fun=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'今年'</span>+<span class="keyword">this</span>.age)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Test2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Test2的原型等于Test的实例   原型链继承</span></span><br><span class="line">    Test2.prototype = <span class="keyword">new</span> Test(<span class="string">'小明'</span>,<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">var</span> a = <span class="keyword">new</span> Test2()</span><br><span class="line">    a.fun()</span><br><span class="line">    <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> Test)  <span class="comment">//true</span></span><br><span class="line">    <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> Test2) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a>缺点:</h5><pre><code>* 1.无法实现多继承* 2.继承属性都是共享的* 3.创建子类实例时，无法向父类构造函数传参</code></pre><h3 id="2-构造函数继承"><a href="#2-构造函数继承" class="headerlink" title="2.构造函数继承"></a>2.构造函数继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">        <span class="keyword">this</span>.fun=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'今年'</span>+<span class="keyword">this</span>.age)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Fun.prototype.h = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Fun2</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">        Fun.call(<span class="keyword">this</span>)    <span class="comment">//改变this指向 继承了Fun的属性和方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="keyword">new</span> Fun2(<span class="string">'小明'</span>,<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">var</span> b = <span class="keyword">new</span> Fun2(<span class="string">'小兰'</span>,<span class="number">15</span>)</span><br><span class="line">    a.fun()</span><br><span class="line">    <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> Fun)  <span class="comment">//false</span></span><br><span class="line">    <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> Fun2) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点:"></a>缺点:</h5><pre><code>* 1.实例并不是父类的实例，只是子类的实例* 2.只能继承父类的实例属性和方法，不能继承原型属性/方法* 3.无法实现函数复用，每个子类都有父类实例函数的副本，影响性能</code></pre><h3 id="3-拷贝继承"><a href="#3-拷贝继承" class="headerlink" title="3.拷贝继承"></a>3.拷贝继承</h3><pre><code class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params">name,age</span>)</span>{        <span class="keyword">this</span>.name = name        <span class="keyword">this</span>.age = age        <span class="keyword">this</span>.fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'今年'</span>+<span class="keyword">this</span>.age);        }    }    <span class="function"><span class="keyword">function</span> <span class="title">Fun2</span>(<span class="params">name,age</span>)</span>{        <span class="keyword">var</span> a = <span class="keyword">new</span> Fun()        <span class="comment">//遍历实例上的属性和方法拷贝到构造函数原型上</span>        <span class="keyword">for</span> (p <span class="keyword">in</span> a){            Fun2.prototype[p] = a[p]        }        Fun2.prototype.name = name        Fun2.prototype.age = age    }    <span class="keyword">var</span> b = <span class="keyword">new</span> Fun2(<span class="string">'小花'</span>,<span class="number">20</span>)    b.fun()    <span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> Fun) <span class="comment">//false</span>    <span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> Fun2) <span class="comment">//true</span></code></pre><h5 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点:"></a>缺点:</h5><pre><code>* 1.效率较低，内存占用高（因为要拷贝父类的属性）* 2.无法获取父类不可枚举的方法（不可枚举方法，不能使用for in 访问到）</code></pre><h3 id="4-组合继承"><a href="#4-组合继承" class="headerlink" title="4.组合继承"></a>4.组合继承</h3><pre><code class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">Fun2</span>(<span class="params">name,age</span>)</span>{       <span class="keyword">this</span>.name = name       <span class="keyword">this</span>.age = age       <span class="keyword">this</span>.fun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{           <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'今年'</span>+<span class="keyword">this</span>.age)       }   }   Fun.prototype.h = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{       <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);   }   <span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params">name,age</span>)</span>{       Fun2.call(<span class="keyword">this</span>)       <span class="keyword">this</span>.name = name       <span class="keyword">this</span>.age = age   }   <span class="comment">//Fun构造函数复制给Fun2的原型上</span>   Fun2.prototype = <span class="keyword">new</span> Fun()   <span class="keyword">var</span> a = <span class="keyword">new</span> Fun2(<span class="string">'小兰'</span>,<span class="number">30</span>)   a.fun()   a.h()   <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> Fun)   <span class="comment">//true</span>   <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> Fun2)  <span class="comment">//true</span></code></pre><h5 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点:"></a>缺点:</h5><pre><code>* 1.调用了两次父类构造函数，生成了两份实例</code></pre><h3 id="5-寄生继承"><a href="#5-寄生继承" class="headerlink" title="5.寄生继承"></a>5.寄生继承</h3><pre><code class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">Fun2</span>(<span class="params">name,age</span>)</span>{        <span class="keyword">this</span>.name = name        <span class="keyword">this</span>.age = age        <span class="keyword">this</span>.fun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'今年'</span>+<span class="keyword">this</span>.age)        }    }    Fun.prototype.h = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{        <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);    }    <span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params">name,age</span>)</span>{        Fun2.call(<span class="keyword">this</span>)        <span class="keyword">this</span>.name = name        <span class="keyword">this</span>.age = age    }    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{        <span class="comment">//再次创建没有实例的构造函数</span>        <span class="keyword">var</span> Fun3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{}        <span class="comment">//将Fun原型复制给Fun3  Fun实例上边会有Fun原型上的属性和方法</span>        Fun3.prototype = Fun.prototype        <span class="comment">//Fun3的实例赋值给Fun2的原型  所以Fun2的实例会有Fun3原型上的属性和方法</span>        Fun2.prototype = <span class="keyword">new</span> Fun3()    })()    <span class="keyword">var</span> a = <span class="keyword">new</span> Fun2(<span class="string">'小兰'</span>,<span class="number">30</span>)    a.fun()    a.h()    <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> Fun)  <span class="comment">//true</span>    <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> Fun2) <span class="comment">//true</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-原型链继承&quot;&gt;&lt;a href=&quot;#1-原型链继承&quot; class=&quot;headerlink&quot; title=&quot;1.原型链继承&quot;&gt;&lt;/a&gt;1.原型链继承&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>数组常用方法</title>
    <link href="http://yoursite.com/2018/08/13/%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/08/13/数组常用方法/</id>
    <published>2018-08-13T06:24:16.000Z</published>
    <updated>2018-09-05T07:07:35.504Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-push-向数组末尾添加元素"><a href="#1-push-向数组末尾添加元素" class="headerlink" title="1.push() 向数组末尾添加元素"></a>1.push() 向数组末尾添加元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">arr.push(<span class="number">5</span>)   <span class="comment">//输出[1,2,3,4,5] 返回数组长度</span></span><br></pre></td></tr></table></figure><h3 id="2-unshift-向数组前面添加元素"><a href="#2-unshift-向数组前面添加元素" class="headerlink" title="2.unshift 向数组前面添加元素"></a>2.unshift 向数组前面添加元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.unshift(<span class="number">0</span>) <span class="comment">//输出[0,1,2,3] 返回数组长度</span></span><br></pre></td></tr></table></figure><h3 id="3-pop-删除数组最后一个元素-该方法会改变原数组"><a href="#3-pop-删除数组最后一个元素-该方法会改变原数组" class="headerlink" title="3.pop() 删除数组最后一个元素 该方法会改变原数组"></a>3.pop() 删除数组最后一个元素 该方法会改变原数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.pop() <span class="comment">//输出[1,2] 返回删除的元素</span></span><br></pre></td></tr></table></figure><h3 id="4-shift-删除数组第一个元素-该方法会改变原数组"><a href="#4-shift-删除数组第一个元素-该方法会改变原数组" class="headerlink" title="4.shift() 删除数组第一个元素 该方法会改变原数组"></a>4.shift() 删除数组第一个元素 该方法会改变原数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.shift() <span class="comment">//输出[2,3] 返回删除元素</span></span><br></pre></td></tr></table></figure><h3 id="5-slice-截取数组"><a href="#5-slice-截取数组" class="headerlink" title="5.slice() 截取数组"></a>5.slice() 截取数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数</span></span><br><span class="line"><span class="comment">//1.截取start位置  2.截取end位置但不包括</span></span><br><span class="line"><span class="comment">//如果不传end则截取start位置之后的所有</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> a = arr.slice(<span class="number">0</span>,<span class="number">3</span>) <span class="comment">//输出[1,2,3]  会返回新数组</span></span><br><span class="line"><span class="keyword">var</span> b = arr.slice(<span class="number">3</span>) <span class="comment">//输出[4,5]</span></span><br></pre></td></tr></table></figure><h3 id="6-splice-方法可以从数组添加、删除元素"><a href="#6-splice-方法可以从数组添加、删除元素" class="headerlink" title="6.splice() 方法可以从数组添加、删除元素"></a>6.splice() 方法可以从数组添加、删除元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数 1.规定添加/删除项目的位置 </span></span><br><span class="line"><span class="comment">//2.要删除的项目数量,如果设置为0，则不会删除项目</span></span><br><span class="line"><span class="comment">//3.要添加的元素(可选)</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">arr.splice(<span class="number">1</span>,<span class="number">1</span>) <span class="comment">//返回[2] 从数组下标为1的位置删除一个元素</span></span><br><span class="line">arr.splice(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>) <span class="comment">//返回[1,1,2,3,4] 从数组下标位置添加元素</span></span><br></pre></td></tr></table></figure><h3 id="7-concat-合并两个或多个数组-不会改变原数组"><a href="#7-concat-合并两个或多个数组-不会改变原数组" class="headerlink" title="7.concat() 合并两个或多个数组  不会改变原数组"></a>7.concat() 合并两个或多个数组  不会改变原数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">var</span> a = arr1.concat(arr2)  <span class="comment">//输出[1,2,3,4,5,6] 返回新的数组</span></span><br></pre></td></tr></table></figure><h3 id="8-indexOf-查找元素在数组的位置"><a href="#8-indexOf-查找元素在数组的位置" class="headerlink" title="8.indexOf() 查找元素在数组的位置"></a>8.indexOf() 查找元素在数组的位置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数 1.产找的字符串值 2.开始查找的位置 如省略从数组首个元素开始</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">arr.indexOf(<span class="number">4</span>) <span class="comment">//输出3 存在就返回下标 不存在返回-1</span></span><br></pre></td></tr></table></figure><h3 id="9-join-数组转为字符串"><a href="#9-join-数组转为字符串" class="headerlink" title="9.join() 数组转为字符串"></a>9.join() 数组转为字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数 1.指定要使用的分隔符 省略则使用逗号</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.join()  <span class="comment">//输出1,2,3</span></span><br></pre></td></tr></table></figure><h3 id="10-reverse-颠倒数组-该方法会改变原数组"><a href="#10-reverse-颠倒数组-该方法会改变原数组" class="headerlink" title="10.reverse() 颠倒数组 该方法会改变原数组"></a>10.reverse() 颠倒数组 该方法会改变原数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.reverse() <span class="comment">//输出[3,2,1]</span></span><br></pre></td></tr></table></figure><h3 id="11-forEach-遍历数组-一般用于操作原数组-没有返回值"><a href="#11-forEach-遍历数组-一般用于操作原数组-没有返回值" class="headerlink" title="11.forEach() 遍历数组 一般用于操作原数组 没有返回值"></a>11.forEach() 遍历数组 一般用于操作原数组 没有返回值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数 1.当前元素 2.下标</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item,index)   <span class="comment">//输出1,2,3 </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="12-map-遍历数组-与forEach类似-会创建新数组并返回"><a href="#12-map-遍历数组-与forEach类似-会创建新数组并返回" class="headerlink" title="12.map() 遍历数组 与forEach类似 会创建新数组并返回"></a>12.map() 遍历数组 与forEach类似 会创建新数组并返回</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数 1.当前元素 2.下标</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,inedx</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item,index) <span class="comment">//输出1,2,3</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="13-includes-判断数组是否包含某个值"><a href="#13-includes-判断数组是否包含某个值" class="headerlink" title="13.includes() 判断数组是否包含某个值"></a>13.includes() 判断数组是否包含某个值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.includes(<span class="number">1</span>)  <span class="comment">//true</span></span><br><span class="line">arr.includes(<span class="number">5</span>)  <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="14-reduce-累加元素"><a href="#14-reduce-累加元素" class="headerlink" title="14.reduce() 累加元素"></a>14.reduce() 累加元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y   <span class="comment">//输出6 将数组元素累加</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="15-filter-数组过滤"><a href="#15-filter-数组过滤" class="headerlink" title="15.filter() 数组过滤"></a>15.filter() 数组过滤</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">3</span> <span class="comment">//输出[4,5] 返回新数组</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-push-向数组末尾添加元素&quot;&gt;&lt;a href=&quot;#1-push-向数组末尾添加元素&quot; class=&quot;headerlink&quot; title=&quot;1.push() 向数组末尾添加元素&quot;&gt;&lt;/a&gt;1.push() 向数组末尾添加元素&lt;/h3&gt;&lt;figure class
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>call apply bind区别</title>
    <link href="http://yoursite.com/2018/08/13/call-apply-bind%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2018/08/13/call-apply-bind区别/</id>
    <published>2018-08-13T02:58:01.000Z</published>
    <updated>2018-09-05T07:07:35.501Z</updated>
    
    <content type="html"><![CDATA[<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'小明'</span>,age=<span class="number">20</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name : <span class="string">'小红'</span>,</span><br><span class="line">        objage:<span class="keyword">this</span>.age,</span><br><span class="line">        myFun:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'年龄'</span>+<span class="keyword">this</span>.age)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">        age : <span class="number">30</span>,</span><br><span class="line">        name : <span class="string">'小兰'</span></span><br><span class="line">    &#125;</span><br><span class="line">obj.myFun.call(obj2) <span class="comment">//将obj的this改变为obj2 所以输出小兰年龄30</span></span><br><span class="line">obj.myFun.apply(obj2) <span class="comment">//同样是将obj的this改变为obj2 所以输出小兰年龄30</span></span><br><span class="line">obj.myFun.bind(obj2)()<span class="comment">//这个稍微有点不用，后边多了一个括号，因为bind返回的是一个函数，需要再次调用，同样是将this改为obj2</span></span><br></pre></td></tr></table></figure><h3 id="在看传参方式"><a href="#在看传参方式" class="headerlink" title="在看传参方式"></a>在看传参方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'小明'</span>,age=<span class="number">20</span></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name : <span class="string">'小红'</span>,</span><br><span class="line">        objage:<span class="keyword">this</span>.age,</span><br><span class="line">        myFun:<span class="function"><span class="keyword">function</span>(<span class="params">address,play</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'年龄'</span>+<span class="keyword">this</span>.age+<span class="string">'来自'</span>+address+<span class="string">'去过'</span>+play)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">        age : <span class="number">30</span>,</span><br><span class="line">        name : <span class="string">'小兰'</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//传参</span></span><br><span class="line">obj.myFun.call(obj2,<span class="string">'上海'</span>,<span class="string">'成都'</span>)   <span class="comment">//call传参方式就是以普通方式传入</span></span><br><span class="line">obj.myFun.apply(obj2,[<span class="string">'北京'</span>,<span class="string">'美国'</span>]) <span class="comment">//apply传参方式是以数组方式传入</span></span><br><span class="line">obj.myFun.bind(obj2,<span class="string">'深圳'</span>,<span class="string">'韩国'</span>)() <span class="comment">//bind传参方式就是以普通方式传入</span></span><br></pre></td></tr></table></figure><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>1.call、apply、bind第一个参数都是改变this指向</li><li>2.call、apply调用一次就可以，bind是需要再次调用</li><li>3.call、bind传参方式都是普通传入用逗号隔开就好，apply是传入数组</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js数组去重的几种方法</title>
    <link href="http://yoursite.com/2018/06/25/js%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/06/25/js数组去重的几种方法/</id>
    <published>2018-06-25T02:27:35.000Z</published>
    <updated>2018-09-05T07:07:35.502Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数组去重的几种方式"><a href="#数组去重的几种方式" class="headerlink" title="数组去重的几种方式"></a>数组去重的几种方式</h3><h4 id="方式1：利用indexOf-遍历数组去重的数组，根据indexOf去判断新数组有没有这个值-有的话就返回索引下标，没有的话就返回-1，如果没有就push到这个新数组中，最后将这个新数组返回实现去重"><a href="#方式1：利用indexOf-遍历数组去重的数组，根据indexOf去判断新数组有没有这个值-有的话就返回索引下标，没有的话就返回-1，如果没有就push到这个新数组中，最后将这个新数组返回实现去重" class="headerlink" title="方式1：利用indexOf 遍历数组去重的数组，根据indexOf去判断新数组有没有这个值,有的话就返回索引下标，没有的话就返回-1，如果没有就push到这个新数组中，最后将这个新数组返回实现去重"></a>方式1：利用indexOf 遍历数组去重的数组，根据indexOf去判断新数组有没有这个值,有的话就返回索引下标，没有的话就返回-1，如果没有就push到这个新数组中，最后将这个新数组返回实现去重</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delre</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ret.indexOf(arr[i]) === <span class="number">-1</span>)&#123;</span><br><span class="line">            ret.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(delre(arr))</span><br><span class="line">输出:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><h4 id="方式2：遍历数组，利用object对象保存数组值，判断数组值是否已经保存在object中，未保存则push到新数组并用object-arrayItem-1的方式记录保存"><a href="#方式2：遍历数组，利用object对象保存数组值，判断数组值是否已经保存在object中，未保存则push到新数组并用object-arrayItem-1的方式记录保存" class="headerlink" title="方式2：遍历数组，利用object对象保存数组值，判断数组值是否已经保存在object中，未保存则push到新数组并用object[arrayItem]=1的方式记录保存"></a>方式2：遍历数组，利用object对象保存数组值，判断数组值是否已经保存在object中，未保存则push到新数组并用object[arrayItem]=1的方式记录保存</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delre</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> ret = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!obj[arr[i]])&#123;</span><br><span class="line">            obj[arr[i]] = <span class="number">1</span></span><br><span class="line">            ret.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(delre(arr))</span><br><span class="line">输出:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><h4 id="方式3：数组下标判断法-遍历数组，利用indexOf判断元素的值是否与当前索引相等，如相等则加入"><a href="#方式3：数组下标判断法-遍历数组，利用indexOf判断元素的值是否与当前索引相等，如相等则加入" class="headerlink" title="方式3：数组下标判断法, 遍历数组，利用indexOf判断元素的值是否与当前索引相等，如相等则加入"></a>方式3：数组下标判断法, 遍历数组，利用indexOf判断元素的值是否与当前索引相等，如相等则加入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delre</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = []</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">e,i</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.indexOf(e)===i)&#123;</span><br><span class="line">            ret.push(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(delre(arr))</span><br><span class="line">输出:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><h4 id="方式4：Es6的set方法"><a href="#方式4：Es6的set方法" class="headerlink" title="方式4：Es6的set方法"></a>方式4：Es6的set方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delre</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = <span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(ret)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(delre(arr))</span><br><span class="line">输出:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><h4 id="方式5：嵌套循环依次比较"><a href="#方式5：嵌套循环依次比较" class="headerlink" title="方式5：嵌套循环依次比较"></a>方式5：嵌套循环依次比较</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delre</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] === arr[j])&#123;</span><br><span class="line">                arr.splice(j,<span class="number">1</span>)</span><br><span class="line">                j--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(delre(arr))</span><br><span class="line">输出:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数组去重的几种方式&quot;&gt;&lt;a href=&quot;#数组去重的几种方式&quot; class=&quot;headerlink&quot; title=&quot;数组去重的几种方式&quot;&gt;&lt;/a&gt;数组去重的几种方式&lt;/h3&gt;&lt;h4 id=&quot;方式1：利用indexOf-遍历数组去重的数组，根据indexOf去判断新
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js的循环机制</title>
    <link href="http://yoursite.com/2018/06/20/js%E7%9A%84%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2018/06/20/js的循环机制/</id>
    <published>2018-06-20T02:20:14.000Z</published>
    <updated>2018-09-05T07:07:35.502Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>大家都知道js是单线程的脚本语言，在同一时间，只能做同一件事，为了协调事件、用户交互、脚本、UI渲染和网络处理等行为，防止主线程阻塞</p><h3 id="为什么js是单线程？"><a href="#为什么js是单线程？" class="headerlink" title="为什么js是单线程？"></a>为什么js是单线程？</h3><p>js作为主要是运行在浏览器的脚本语言，js主要用途之一是操作DOM</p><p>如果js同时有两个线程，同时对同一个dom进行操作，这时浏览器应该听哪一个的线程的，如何判断优先级？<br>为了避免这个问题，js必须是一门单线程语言</p><h3 id="执行栈与任务队列"><a href="#执行栈与任务队列" class="headerlink" title="执行栈与任务队列"></a>执行栈与任务队列</h3><p>因为js是单线程语言，当遇到异步任务(如ajax操作时)，不可能一直等待异步任务完成，在继续往下执行，在这期间浏览器是空闲状态，显而易见这会导致巨大的资源浪费。</p><h3 id="执行栈"><a href="#执行栈" class="headerlink" title="执行栈"></a>执行栈</h3><p>当执行某个函数、用户点击一次鼠标，ajax完成，一个图片加载完成等事件发生时，只要指定过回调函数，这些事件发生就会进入执行栈队列中，等待主线程读取，遵循先进先出原则。</p><h3 id="主线程"><a href="#主线程" class="headerlink" title="主线程"></a>主线程</h3><p>要明确的一点是，主线程跟执行栈是不同概念，主线程规定现在执行执行栈中的哪个时间。</p><p>主线程循环：主线程会不停的从执行栈中读取时间，会执行完所有栈中的同步代码。<br>当遇到一个异步事件后，并不会一直等待异步事件返回结果，而是会将这个事件挂在与执行栈不同的队列中，我们称之为任务队列(Task Queue)。<br>当主线程将执行栈中所有的代码执行完之后，主线程将会去查看任务队列是否有任务，如果有，那么主线程会依次执行那些任务队列中的回调函数。</p><h3 id="js异步执行的运行机制"><a href="#js异步执行的运行机制" class="headerlink" title="js异步执行的运行机制"></a>js异步执行的运行机制</h3><ul><li>1.所有任务都在主线程上执行，形成一个执行栈</li><li>2.主线程之外，还存在一个’任务队列’(Task Queue)，只要异步任务有了运行结果，就在’任务队列’中放置一个事件</li><li>3.一旦’执行栈’中的所有同步任务执行完毕，系统就会读取’任务队列’，那些对应的任务结束等待状态，进入执行栈并开始执行</li><li>4.主线程不断重复上面的第三步</li></ul><h3 id="事件循环需要记住以下几点"><a href="#事件循环需要记住以下几点" class="headerlink" title="事件循环需要记住以下几点:"></a>事件循环需要记住以下几点:</h3><ul><li>事件队列严格按照时间先后顺序将任务压入执行栈执行</li><li>当执行栈为空时，浏览器会一直不停的检查事件队列，如果不为空，则取出第一个任务</li><li>在每一个任务结束之后，浏览器会对页面进行渲染</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;大家都知道js是单线程的脚本语言，在同一时间，只能做同一件事，为了协调事件、用户交互、脚本、UI渲染和网络处理等行为，防止主线程阻塞&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>清除浮动的几种方法</title>
    <link href="http://yoursite.com/2018/05/25/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/05/25/清除浮动的几种方法/</id>
    <published>2018-05-25T02:44:40.000Z</published>
    <updated>2018-09-05T07:07:35.504Z</updated>
    
    <content type="html"><![CDATA[<h3 id="清除浮动的几种方法"><a href="#清除浮动的几种方法" class="headerlink" title="清除浮动的几种方法"></a>清除浮动的几种方法</h3><h4 id="为什么要清除浮动呢请看如下代码"><a href="#为什么要清除浮动呢请看如下代码" class="headerlink" title="为什么要清除浮动呢请看如下代码:"></a>为什么要清除浮动呢请看如下代码:</h4><blockquote><p>html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">       <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> <span class="selector-class">.left</span>&#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">       <span class="attribute">background-color</span>: pink;</span><br><span class="line">       <span class="attribute">float</span>: left;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.right</span>&#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">       <span class="attribute">background-color</span>: red;</span><br><span class="line">       <span class="attribute">float</span>: right;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>我要让left和right两个div在box盒子里左右浮动，当然这样写没有什么毛病，但是两个盒子因为浮动的原因脱离了文档流，导致父元素box高度塌陷，不能被内容撑开，如下图：<br><img src="http://i2.bvimg.com/647072/7ff24b5aec6b8762.png" alt=""><br>这样我们已经看到了父元素的高度已经没有了，这就是我们清除浮动的原因了</p><h4 id="接下来我们看一下清除浮动的几种方法"><a href="#接下来我们看一下清除浮动的几种方法" class="headerlink" title="接下来我们看一下清除浮动的几种方法"></a>接下来我们看一下清除浮动的几种方法</h4><h5 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h5><p>在盒子里边添加一个元素添加设置.clear{clear:both;}样式</p><blockquote><p>html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: pink;</span><br><span class="line">      <span class="attribute">float</span>: left;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.right</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: red;</span><br><span class="line">      <span class="attribute">float</span>: right;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.clear</span>&#123;</span><br><span class="line">      <span class="attribute">clear</span>: both;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>效果图如下：<br><img src="http://i2.bvimg.com/647072/e1222ac3b63a5f0d.png" alt=""><br>达到了我们想要的效果</p><ul><li>原理：添加一个空div，利用css提高的clear:both清除浮动，让父级div能自动获取到高度</li><li>优点：简单，代码少，浏览器支持好，不容易出现怪问题</li><li>缺点：如果页面浮动布局多，就要增加很多空div，让人感觉很不爽</li><li>建议：不推荐使用，但此方法是以前主要使用的一种清除浮动方法</li></ul><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>给box父元素添加 overflow:hidden或者auto样式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">      <span class="attribute">overflow</span>:hidden;</span><br><span class="line">      zoom:1;      //兼容IE</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: pink;</span><br><span class="line">      <span class="attribute">float</span>: left;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.right</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: red;</span><br><span class="line">      <span class="attribute">float</span>: right;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当然效果图还是和上边一样的，父元素正常被撑开了</p><ul><li>原理：必须定义width或zoom:1，同时不能定义height，使用overflow:hidden时，浏览器会自动检查浮动区域的高度</li><li>优点：简单，代码少，浏览器支持好</li><li>缺点：不能和position配合使用，因为超出的尺寸的会被隐藏</li><li>建议：只推荐没有使用position或对overflow:hidden理解比较深的朋友使用</li></ul><h4 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h4><p>利用伪元素 box:after 来设置样式，清除浮动<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;        </span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">clear</span>: both;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">      <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: pink;</span><br><span class="line">      <span class="attribute">float</span>: left;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.right</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: red;</span><br><span class="line">      <span class="attribute">float</span>: right;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这样一样被撑开了</p><ul><li>原理：IE8以上和非IE浏览器才支持:after，原理和方法2有点类似，zoom(IE转有属性)可解决ie6,ie7浮动问题</li><li>优点：浏览器支持好，不容易出现怪问题（目前：大型网站都有使用，如：腾迅，网易，新浪等等）</li><li>缺点：代码多，要两句代码结合使用，才能让主流浏览器都支持</li><li>建议：推荐使用，建议定义公共类，以减少CSS代码</li></ul><h4 id="其实还有很多清除浮动的方法不过都没有什么优点比如："><a href="#其实还有很多清除浮动的方法不过都没有什么优点比如：" class="headerlink" title="其实还有很多清除浮动的方法不过都没有什么优点比如："></a>其实还有很多清除浮动的方法不过都没有什么优点比如：</h4><ul><li>让父元素盒子一起浮动，这样就导致他们成了一个整体，没有优点还会产生新的浮动问题</li><li>给父元素添加高度，但是这样高度就不能自适应了，当然也不太合适</li><li>将父元素设置为display:table，缺点未知</li><li>在这里还是推荐方法三</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;清除浮动的几种方法&quot;&gt;&lt;a href=&quot;#清除浮动的几种方法&quot; class=&quot;headerlink&quot; title=&quot;清除浮动的几种方法&quot;&gt;&lt;/a&gt;清除浮动的几种方法&lt;/h3&gt;&lt;h4 id=&quot;为什么要清除浮动呢请看如下代码&quot;&gt;&lt;a href=&quot;#为什么要清除浮动呢请
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>小程序request接口封装实例</title>
    <link href="http://yoursite.com/2018/05/23/%E5%B0%8F%E7%A8%8B%E5%BA%8Frequest%E6%8E%A5%E5%8F%A3%E5%B0%81%E8%A3%85%E5%AE%9E%E4%BE%8B/"/>
    <id>http://yoursite.com/2018/05/23/小程序request接口封装实例/</id>
    <published>2018-05-23T06:10:22.000Z</published>
    <updated>2018-09-05T07:07:35.503Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用Promise对小程序wx-request接口进行封装"><a href="#使用Promise对小程序wx-request接口进行封装" class="headerlink" title="使用Promise对小程序wx.request接口进行封装"></a>使用Promise对小程序wx.request接口进行封装</h3><h4 id="新建一个request-js文件，代码如下"><a href="#新建一个request-js文件，代码如下" class="headerlink" title="新建一个request.js文件，代码如下:"></a>新建一个request.js文件，代码如下:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//url 接口地址</span></span><br><span class="line"> <span class="comment">//method 请求方式 </span></span><br><span class="line"> <span class="comment">//data 要传给服务器端的数据  没有的话传个&#123;&#125;就可以</span></span><br><span class="line"> <span class="comment">//还需要别的在添加就ok</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url,method,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        wx.request(&#123;</span><br><span class="line">            url,</span><br><span class="line">            method,</span><br><span class="line">            data:&#123;data&#125;,</span><br><span class="line">            header: &#123;</span><br><span class="line">                <span class="string">'content-type'</span>: <span class="string">'application/json'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">                resolve(res)</span><br><span class="line">            &#125;,</span><br><span class="line">            fail:<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">                reject(error)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    request</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在文件中使用"><a href="#在文件中使用" class="headerlink" title="在文件中使用"></a>在文件中使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入封装好的request文件</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'文件路径'</span>)</span><br><span class="line"><span class="comment">//这里已post为例</span></span><br><span class="line">request.request(<span class="string">'url'</span>,<span class="string">'POST'</span>,data)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 请求成功函数</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .error(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//请求失败函数</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用Promise对小程序wx-request接口进行封装&quot;&gt;&lt;a href=&quot;#使用Promise对小程序wx-request接口进行封装&quot; class=&quot;headerlink&quot; title=&quot;使用Promise对小程序wx.request接口进行封装&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序实现下拉刷新和上拉加载</title>
    <link href="http://yoursite.com/2018/05/23/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E5%92%8C%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD/"/>
    <id>http://yoursite.com/2018/05/23/微信小程序实现下拉刷新和上拉加载/</id>
    <published>2018-05-23T03:42:43.000Z</published>
    <updated>2018-09-05T07:07:35.503Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h3><h4 id="下拉刷新两个步骤"><a href="#下拉刷新两个步骤" class="headerlink" title="下拉刷新两个步骤"></a>下拉刷新两个步骤</h4><ul><li><p>在要添加下拉刷新页面的json文件添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"enablePullDownRefresh"</span>:<span class="literal">true</span>        <span class="comment">//来开始下拉刷新</span></span><br></pre></td></tr></table></figure></li><li><p>添加背景颜色，不添加的话默认是白色，会与背景颜色相同，看不见icon</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"backgroundColor"</span>:<span class="string">"dark"</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="在要实现下拉刷新的页面添加下拉刷新函数"><a href="#在要实现下拉刷新的页面添加下拉刷新函数" class="headerlink" title="在要实现下拉刷新的页面添加下拉刷新函数"></a>在要实现下拉刷新的页面添加下拉刷新函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onPullDownRefresh() &#123;</span><br><span class="line">    wx.showNavigationBarLoading()       <span class="comment">//在标题栏中显示加载loading</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="下拉刷新完成之后调用如下函数来停止刷新"><a href="#下拉刷新完成之后调用如下函数来停止刷新" class="headerlink" title="下拉刷新完成之后调用如下函数来停止刷新"></a>下拉刷新完成之后调用如下函数来停止刷新</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onPullDownRefresh() &#123;</span><br><span class="line">    wx.showNavigationBarLoading()       <span class="comment">//在标题栏中显示加载loading</span></span><br><span class="line">    wx.stopPullDownRefresh()            <span class="comment">//停止刷新</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上拉加载"><a href="#上拉加载" class="headerlink" title="上拉加载"></a>上拉加载</h3><p>上垃加载主要是利用了js中的onReachBottom方法，它表示”页面上拉触底事件的处理函数”，我们就在这时请求服务器获取到对应数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onReachBottom:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//请求数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;下拉刷新&quot;&gt;&lt;a href=&quot;#下拉刷新&quot; class=&quot;headerlink&quot; title=&quot;下拉刷新&quot;&gt;&lt;/a&gt;下拉刷新&lt;/h3&gt;&lt;h4 id=&quot;下拉刷新两个步骤&quot;&gt;&lt;a href=&quot;#下拉刷新两个步骤&quot; class=&quot;headerlink&quot; title=&quot;下
      
    
    </summary>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>hexo多台电脑更新博客</title>
    <link href="http://yoursite.com/2018/05/22/hexo%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/05/22/hexo多台电脑更新博客/</id>
    <published>2018-05-22T08:37:02.000Z</published>
    <updated>2018-09-05T07:07:35.502Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><ul><li><label style="color:#b63650">hexo</label>生成的静态博客文件都是传到github上的，且默认放在master分支上，而配置文件都是放在本地的</li><li><label style="color:#b63650">hexo</label>(配置文件)都是可以放到hexo分支上(创建一个新的分支)，切换电脑时，直接git clone hexo分支</li></ul><h4 id="在xxx-github-io仓库下创建一个新的hexo分支"><a href="#在xxx-github-io仓库下创建一个新的hexo分支" class="headerlink" title="在xxx.github.io仓库下创建一个新的hexo分支"></a>在xxx.github.io仓库下创建一个新的hexo分支</h4><p>切换到hexo分支，并在<label style="color:#b63650">-&gt;Settings-&gt;Branches-&gt;Default branch</label>中将默认分支设置为hexo，save保存<br><img src="https://user-gold-cdn.xitu.io/2018/4/12/162b922ff0603fc4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><h4 id="克隆hexo分支到本地"><a href="#克隆hexo分支到本地" class="headerlink" title="克隆hexo分支到本地"></a>克隆hexo分支到本地</h4><ul><li>将新建的hexo分支克隆到本地，在终端中cd到xxx.github.io文件夹</li><li>使用<label style="color:#b63650">git branch</label>查看分支，应该默认是hexo</li></ul><h4 id="部署文件"><a href="#部署文件" class="headerlink" title="部署文件"></a>部署文件</h4><ul><li>将本地的hexo配置文件(全部文件)全部拷贝到xxx.github.io文件根目录下</li><li>安装需要用到的插件(可选)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-deployer-heroku --save</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line">npm install hexo-deployer-openshift --save</span><br><span class="line">npm install hexo-renderer-marked@<span class="number">0.2</span> --save</span><br><span class="line">npm install hexo-renderer-stylus@<span class="number">0.2</span> --save</span><br><span class="line">npm install hexo-generator-feed@<span class="number">1</span> --save</span><br><span class="line">npm install hexo-generator-sitemap@<span class="number">1</span> --save</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><ul><li>将文件全部提交到hexo分支</li><li>注意事项<br>  1.主题文件夹下边可能会有<label style="color:#b63650">.git</label>、<label style="color:#b63650">.github</label>隐藏文件夹，将文件删除在提交，不然可能会提交不上去</li></ul><blockquote><p>master分支和hexo分支各自保存着一个版本，master分支用于保存博客静态资源，提供博客页面供人访问；hexo分支用于备份博客部署文件，供自己维护更新，两者在一个GitHub仓库内也不会有任何冲突</p></blockquote><h3 id="在其他电脑更新博客"><a href="#在其他电脑更新博客" class="headerlink" title="在其他电脑更新博客"></a>在其他电脑更新博客</h3><ul><li>在新电脑克隆xxx.github.io仓库的hexo分支到本地</li><li>cd到xxx.github.io文件夹下，执行npm install </li><li>现在就可以在不同电脑下更新博客了</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;创建分支&quot;&gt;&lt;a href=&quot;#创建分支&quot; class=&quot;headerlink&quot; title=&quot;创建分支&quot;&gt;&lt;/a&gt;创建分支&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;label style=&quot;color:#b63650&quot;&gt;hexo&lt;/label&gt;生成的静态博客文件都是传到gi
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用github搭建hexo个人博客</title>
    <link href="http://yoursite.com/2018/05/22/%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/05/22/使用github搭建hexo个人博客/</id>
    <published>2018-05-22T03:53:49.000Z</published>
    <updated>2018-09-05T07:07:35.503Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>1.准备一个github账号，没有的话去<a href="https://github.com/" target="_blank" rel="noopener">github</a>注册</li><li>2.电脑安装node、git、npm</li></ul><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><ul><li>当node、git都安装完成之后，在终端运行如下命令：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure></li></ul><h3 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h3><ul><li>1.在电脑中新建一个空文件夹，名字随意，如MyBlog</li><li>2.cd到当前文件夹</li><li>3.在终端运行如下命令，生成模板<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></li></ul><h5 id="安装完模板应该会有一个package-json文件，执行如下命令安装依赖："><a href="#安装完模板应该会有一个package-json文件，执行如下命令安装依赖：" class="headerlink" title="安装完模板应该会有一个package.json文件，执行如下命令安装依赖："></a>安装完模板应该会有一个package.json文件，执行如下命令安装依赖：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h5 id="然后运行如下命令开始hexo服务器"><a href="#然后运行如下命令开始hexo服务器" class="headerlink" title="然后运行如下命令开始hexo服务器:"></a>然后运行如下命令开始hexo服务器:</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h5 id="输入http-localhost-4000-，应该就可以看到以下页面"><a href="#输入http-localhost-4000-，应该就可以看到以下页面" class="headerlink" title="输入http://localhost:4000/，应该就可以看到以下页面"></a>输入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，应该就可以看到以下页面</h5><p><img src="http://upload-images.jianshu.io/upload_images/4122543-dfe49f13bcfd743d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt=""></p><h3 id="关联github"><a href="#关联github" class="headerlink" title="关联github"></a>关联github</h3><h4 id="新建一个github仓库"><a href="#新建一个github仓库" class="headerlink" title="新建一个github仓库"></a>新建一个github仓库</h4><ul><li>在github上创建名字为XXX.github.io的项目，xxx必须是自己github账号的用户名</li></ul><h4 id="修改-fonfig-yml配置文件"><a href="#修改-fonfig-yml配置文件" class="headerlink" title="修改_fonfig.yml配置文件"></a>修改<label style="color:#b63650">_fonfig.yml</label>配置文件</h4><ul><li>1.打开本地MyBlog根目录下边的_fonfig.yml配置文件</li><li>2.将其中的type设置为git，repository是你github.io仓库的地址</li><li>3.每次个属性冒号后边都要加一个空格，不然会报错<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https:<span class="comment">//github.com/CoderTitan/CoderTitan.github.io.git</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ul><h4 id="将配置文件部署到github上"><a href="#将配置文件部署到github上" class="headerlink" title="将配置文件部署到github上"></a>将配置文件部署到github上</h4><ul><li>打开终端，cd到MyBlog文件夹下，执行如下命令</li></ul><h5 id="在MyBlog根目录下执行如下命令生成静态文件："><a href="#在MyBlog根目录下执行如下命令生成静态文件：" class="headerlink" title="在MyBlog根目录下执行如下命令生成静态文件："></a>在MyBlog根目录下执行如下命令生成静态文件：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate     或者：hexo g</span><br></pre></td></tr></table></figure><h5 id="此时若出现如下报错："><a href="#此时若出现如下报错：" class="headerlink" title="此时若出现如下报错："></a>此时若出现如下报错：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR Local hexo not found <span class="keyword">in</span> ~<span class="regexp">/blog</span></span><br><span class="line"><span class="regexp">ERROR Try runing: 'npm install hexo --save'</span></span><br></pre></td></tr></table></figure><h5 id="则执行命令："><a href="#则执行命令：" class="headerlink" title="则执行命令："></a>则执行命令：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo --save</span><br></pre></td></tr></table></figure><h5 id="再执行配置命令："><a href="#再执行配置命令：" class="headerlink" title="再执行配置命令："></a>再执行配置命令：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy           或者：hexo d</span><br></pre></td></tr></table></figure><h5 id="报错一-若执行命令hexo-deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git："><a href="#报错一-若执行命令hexo-deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git：" class="headerlink" title="报错一: 若执行命令hexo deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git："></a>报错一: 若执行命令hexo deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h5 id="报错二-若执行命令hexo-d报以下错误"><a href="#报错二-若执行命令hexo-d报以下错误" class="headerlink" title="报错二: 若执行命令hexo d报以下错误:"></a>报错二: 若执行命令hexo d报以下错误:</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR Plugin load failed: hexo-server</span><br><span class="line"><span class="comment">//或者类似的错误</span></span><br><span class="line">ERROR Plugin load failed: hexo-renderer-sass</span><br></pre></td></tr></table></figure><h5 id="则执行响应的命令"><a href="#则执行响应的命令" class="headerlink" title="则执行响应的命令:"></a>则执行响应的命令:</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-server</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">sudo npm install hexo-renderer-sass</span><br></pre></td></tr></table></figure><h5 id="最后执行："><a href="#最后执行：" class="headerlink" title="最后执行："></a>最后执行：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><ul><li>hexo d执行完成后，在浏览器打开<a href="http://xxx.github.io就能看到搭建好的博客了" target="_blank" rel="noopener">http://xxx.github.io就能看到搭建好的博客了</a></li></ul><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><ul><li>我们可以去<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方网站</a>下载主题</li><li>示例next</li></ul><h4 id="cd到MyBlog根目录下执行"><a href="#cd到MyBlog根目录下执行" class="headerlink" title="cd到MyBlog根目录下执行"></a>cd到MyBlog根目录下执行</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/theme-next/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure><p>下载的主题默认是在theme文件夹下，然后重新执行hexo g来生成</p><h4 id="每次部署文章的步骤"><a href="#每次部署文章的步骤" class="headerlink" title="每次部署文章的步骤"></a>每次部署文章的步骤</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean           <span class="comment">//清除缓存文件 (db.json) 和已生成的静态文件 (public)</span></span><br><span class="line"></span><br><span class="line">hexo g             <span class="comment">//生成缓存和静态文件</span></span><br><span class="line"> </span><br><span class="line">hexo d             <span class="comment">//重新部署到服务器</span></span><br></pre></td></tr></table></figure><h3 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h3><ul><li>现在使用的域名是Github提供的二级域名XXX.github.io，也可以绑定为自己的个性域名</li><li>可以到阿里万网购买，可以直接在网站做域名解析</li></ul><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>如果将域名指向一个域名，实现与被指向域名相同的访问效果，需要增加CNAME记录。登录万网，在你购买的域名后边点击：解析, 如下图<br><img src="http://upload-images.jianshu.io/upload_images/4122543-952aa0a8a84a089f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>进入解析页面后点击添加解析, 向你的 DNS 配置中添加 3 条记录, 如下图<br>注意CNAME记录添加的是username.github.io.(不要忘记后面的.), 可能最后一个点不显示(我的就不显示)<br><img src="http://upload-images.jianshu.io/upload_images/4122543-b2435667d603f844.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="设置github配置信息"><a href="#设置github配置信息" class="headerlink" title="设置github配置信息"></a>设置github配置信息</h3><ul><li>打开你的xxx.github.io项目地址，找到设置页面</li><li>滚动到下方找到github pages模块，在custom domain，输入你购买的域名，点击save保存</li></ul><h3 id="创建CNAME文件"><a href="#创建CNAME文件" class="headerlink" title="创建CNAME文件"></a>创建CNAME文件</h3><ul><li>在/MyBlog/themes/landscape/source目录下新建文件名为：CNAME文件，注意没有后缀名！直接将自己的域名写入</li><li>CNAME一定要大写</li><li>完成上述步骤后, 终端cd到MyBlog目录下执行如下命令重新部署：</li><li>最后, 等十分钟左右，刷新浏览器，用你自己域名访问下试试</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1.准备一个github账号，没有的话去&lt;a href=&quot;https://github.com/&quot; target
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
