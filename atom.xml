<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>兰志远</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-05T07:07:35.502Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>前端</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js继承几种方式</title>
    <link href="http://yoursite.com/2018/08/13/js%E7%BB%A7%E6%89%BF%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/08/13/js继承几种方式/</id>
    <published>2018-08-13T09:39:26.000Z</published>
    <updated>2018-09-05T07:07:35.502Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1.原型链继承"></a>1.原型链继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name || <span class="string">'小红'</span></span><br><span class="line">        <span class="keyword">this</span>.age = age || <span class="number">15</span></span><br><span class="line">        <span class="keyword">this</span>.fun=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'今年'</span>+<span class="keyword">this</span>.age)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Test2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Test2的原型等于Test的实例   原型链继承</span></span><br><span class="line">    Test2.prototype = <span class="keyword">new</span> Test(<span class="string">'小明'</span>,<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">var</span> a = <span class="keyword">new</span> Test2()</span><br><span class="line">    a.fun()</span><br><span class="line">    <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> Test)  <span class="comment">//true</span></span><br><span class="line">    <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> Test2) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a>缺点:</h5><pre><code>* 1.无法实现多继承* 2.继承属性都是共享的* 3.创建子类实例时，无法向父类构造函数传参</code></pre><h3 id="2-构造函数继承"><a href="#2-构造函数继承" class="headerlink" title="2.构造函数继承"></a>2.构造函数继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">        <span class="keyword">this</span>.fun=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'今年'</span>+<span class="keyword">this</span>.age)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Fun.prototype.h = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Fun2</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">        Fun.call(<span class="keyword">this</span>)    <span class="comment">//改变this指向 继承了Fun的属性和方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="keyword">new</span> Fun2(<span class="string">'小明'</span>,<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">var</span> b = <span class="keyword">new</span> Fun2(<span class="string">'小兰'</span>,<span class="number">15</span>)</span><br><span class="line">    a.fun()</span><br><span class="line">    <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> Fun)  <span class="comment">//false</span></span><br><span class="line">    <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> Fun2) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点:"></a>缺点:</h5><pre><code>* 1.实例并不是父类的实例，只是子类的实例* 2.只能继承父类的实例属性和方法，不能继承原型属性/方法* 3.无法实现函数复用，每个子类都有父类实例函数的副本，影响性能</code></pre><h3 id="3-拷贝继承"><a href="#3-拷贝继承" class="headerlink" title="3.拷贝继承"></a>3.拷贝继承</h3><pre><code class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params">name,age</span>)</span>{        <span class="keyword">this</span>.name = name        <span class="keyword">this</span>.age = age        <span class="keyword">this</span>.fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'今年'</span>+<span class="keyword">this</span>.age);        }    }    <span class="function"><span class="keyword">function</span> <span class="title">Fun2</span>(<span class="params">name,age</span>)</span>{        <span class="keyword">var</span> a = <span class="keyword">new</span> Fun()        <span class="comment">//遍历实例上的属性和方法拷贝到构造函数原型上</span>        <span class="keyword">for</span> (p <span class="keyword">in</span> a){            Fun2.prototype[p] = a[p]        }        Fun2.prototype.name = name        Fun2.prototype.age = age    }    <span class="keyword">var</span> b = <span class="keyword">new</span> Fun2(<span class="string">'小花'</span>,<span class="number">20</span>)    b.fun()    <span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> Fun) <span class="comment">//false</span>    <span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> Fun2) <span class="comment">//true</span></code></pre><h5 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点:"></a>缺点:</h5><pre><code>* 1.效率较低，内存占用高（因为要拷贝父类的属性）* 2.无法获取父类不可枚举的方法（不可枚举方法，不能使用for in 访问到）</code></pre><h3 id="4-组合继承"><a href="#4-组合继承" class="headerlink" title="4.组合继承"></a>4.组合继承</h3><pre><code class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">Fun2</span>(<span class="params">name,age</span>)</span>{       <span class="keyword">this</span>.name = name       <span class="keyword">this</span>.age = age       <span class="keyword">this</span>.fun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{           <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'今年'</span>+<span class="keyword">this</span>.age)       }   }   Fun.prototype.h = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{       <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);   }   <span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params">name,age</span>)</span>{       Fun2.call(<span class="keyword">this</span>)       <span class="keyword">this</span>.name = name       <span class="keyword">this</span>.age = age   }   <span class="comment">//Fun构造函数复制给Fun2的原型上</span>   Fun2.prototype = <span class="keyword">new</span> Fun()   <span class="keyword">var</span> a = <span class="keyword">new</span> Fun2(<span class="string">'小兰'</span>,<span class="number">30</span>)   a.fun()   a.h()   <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> Fun)   <span class="comment">//true</span>   <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> Fun2)  <span class="comment">//true</span></code></pre><h5 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点:"></a>缺点:</h5><pre><code>* 1.调用了两次父类构造函数，生成了两份实例</code></pre><h3 id="5-寄生继承"><a href="#5-寄生继承" class="headerlink" title="5.寄生继承"></a>5.寄生继承</h3><pre><code class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">Fun2</span>(<span class="params">name,age</span>)</span>{        <span class="keyword">this</span>.name = name        <span class="keyword">this</span>.age = age        <span class="keyword">this</span>.fun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'今年'</span>+<span class="keyword">this</span>.age)        }    }    Fun.prototype.h = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{        <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);    }    <span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params">name,age</span>)</span>{        Fun2.call(<span class="keyword">this</span>)        <span class="keyword">this</span>.name = name        <span class="keyword">this</span>.age = age    }    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{        <span class="comment">//再次创建没有实例的构造函数</span>        <span class="keyword">var</span> Fun3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{}        <span class="comment">//将Fun原型复制给Fun3  Fun实例上边会有Fun原型上的属性和方法</span>        Fun3.prototype = Fun.prototype        <span class="comment">//Fun3的实例赋值给Fun2的原型  所以Fun2的实例会有Fun3原型上的属性和方法</span>        Fun2.prototype = <span class="keyword">new</span> Fun3()    })()    <span class="keyword">var</span> a = <span class="keyword">new</span> Fun2(<span class="string">'小兰'</span>,<span class="number">30</span>)    a.fun()    a.h()    <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> Fun)  <span class="comment">//true</span>    <span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> Fun2) <span class="comment">//true</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-原型链继承&quot;&gt;&lt;a href=&quot;#1-原型链继承&quot; class=&quot;headerlink&quot; title=&quot;1.原型链继承&quot;&gt;&lt;/a&gt;1.原型链继承&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>数组常用方法</title>
    <link href="http://yoursite.com/2018/08/13/%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/08/13/数组常用方法/</id>
    <published>2018-08-13T06:24:16.000Z</published>
    <updated>2018-09-05T07:07:35.504Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-push-向数组末尾添加元素"><a href="#1-push-向数组末尾添加元素" class="headerlink" title="1.push() 向数组末尾添加元素"></a>1.push() 向数组末尾添加元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">arr.push(<span class="number">5</span>)   <span class="comment">//输出[1,2,3,4,5] 返回数组长度</span></span><br></pre></td></tr></table></figure><h3 id="2-unshift-向数组前面添加元素"><a href="#2-unshift-向数组前面添加元素" class="headerlink" title="2.unshift 向数组前面添加元素"></a>2.unshift 向数组前面添加元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.unshift(<span class="number">0</span>) <span class="comment">//输出[0,1,2,3] 返回数组长度</span></span><br></pre></td></tr></table></figure><h3 id="3-pop-删除数组最后一个元素-该方法会改变原数组"><a href="#3-pop-删除数组最后一个元素-该方法会改变原数组" class="headerlink" title="3.pop() 删除数组最后一个元素 该方法会改变原数组"></a>3.pop() 删除数组最后一个元素 该方法会改变原数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.pop() <span class="comment">//输出[1,2] 返回删除的元素</span></span><br></pre></td></tr></table></figure><h3 id="4-shift-删除数组第一个元素-该方法会改变原数组"><a href="#4-shift-删除数组第一个元素-该方法会改变原数组" class="headerlink" title="4.shift() 删除数组第一个元素 该方法会改变原数组"></a>4.shift() 删除数组第一个元素 该方法会改变原数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.shift() <span class="comment">//输出[2,3] 返回删除元素</span></span><br></pre></td></tr></table></figure><h3 id="5-slice-截取数组"><a href="#5-slice-截取数组" class="headerlink" title="5.slice() 截取数组"></a>5.slice() 截取数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数</span></span><br><span class="line"><span class="comment">//1.截取start位置  2.截取end位置但不包括</span></span><br><span class="line"><span class="comment">//如果不传end则截取start位置之后的所有</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> a = arr.slice(<span class="number">0</span>,<span class="number">3</span>) <span class="comment">//输出[1,2,3]  会返回新数组</span></span><br><span class="line"><span class="keyword">var</span> b = arr.slice(<span class="number">3</span>) <span class="comment">//输出[4,5]</span></span><br></pre></td></tr></table></figure><h3 id="6-splice-方法可以从数组添加、删除元素"><a href="#6-splice-方法可以从数组添加、删除元素" class="headerlink" title="6.splice() 方法可以从数组添加、删除元素"></a>6.splice() 方法可以从数组添加、删除元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数 1.规定添加/删除项目的位置 </span></span><br><span class="line"><span class="comment">//2.要删除的项目数量,如果设置为0，则不会删除项目</span></span><br><span class="line"><span class="comment">//3.要添加的元素(可选)</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">arr.splice(<span class="number">1</span>,<span class="number">1</span>) <span class="comment">//返回[2] 从数组下标为1的位置删除一个元素</span></span><br><span class="line">arr.splice(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>) <span class="comment">//返回[1,1,2,3,4] 从数组下标位置添加元素</span></span><br></pre></td></tr></table></figure><h3 id="7-concat-合并两个或多个数组-不会改变原数组"><a href="#7-concat-合并两个或多个数组-不会改变原数组" class="headerlink" title="7.concat() 合并两个或多个数组  不会改变原数组"></a>7.concat() 合并两个或多个数组  不会改变原数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">var</span> a = arr1.concat(arr2)  <span class="comment">//输出[1,2,3,4,5,6] 返回新的数组</span></span><br></pre></td></tr></table></figure><h3 id="8-indexOf-查找元素在数组的位置"><a href="#8-indexOf-查找元素在数组的位置" class="headerlink" title="8.indexOf() 查找元素在数组的位置"></a>8.indexOf() 查找元素在数组的位置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数 1.产找的字符串值 2.开始查找的位置 如省略从数组首个元素开始</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">arr.indexOf(<span class="number">4</span>) <span class="comment">//输出3 存在就返回下标 不存在返回-1</span></span><br></pre></td></tr></table></figure><h3 id="9-join-数组转为字符串"><a href="#9-join-数组转为字符串" class="headerlink" title="9.join() 数组转为字符串"></a>9.join() 数组转为字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数 1.指定要使用的分隔符 省略则使用逗号</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.join()  <span class="comment">//输出1,2,3</span></span><br></pre></td></tr></table></figure><h3 id="10-reverse-颠倒数组-该方法会改变原数组"><a href="#10-reverse-颠倒数组-该方法会改变原数组" class="headerlink" title="10.reverse() 颠倒数组 该方法会改变原数组"></a>10.reverse() 颠倒数组 该方法会改变原数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.reverse() <span class="comment">//输出[3,2,1]</span></span><br></pre></td></tr></table></figure><h3 id="11-forEach-遍历数组-一般用于操作原数组-没有返回值"><a href="#11-forEach-遍历数组-一般用于操作原数组-没有返回值" class="headerlink" title="11.forEach() 遍历数组 一般用于操作原数组 没有返回值"></a>11.forEach() 遍历数组 一般用于操作原数组 没有返回值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数 1.当前元素 2.下标</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item,index)   <span class="comment">//输出1,2,3 </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="12-map-遍历数组-与forEach类似-会创建新数组并返回"><a href="#12-map-遍历数组-与forEach类似-会创建新数组并返回" class="headerlink" title="12.map() 遍历数组 与forEach类似 会创建新数组并返回"></a>12.map() 遍历数组 与forEach类似 会创建新数组并返回</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数 1.当前元素 2.下标</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,inedx</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item,index) <span class="comment">//输出1,2,3</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="13-includes-判断数组是否包含某个值"><a href="#13-includes-判断数组是否包含某个值" class="headerlink" title="13.includes() 判断数组是否包含某个值"></a>13.includes() 判断数组是否包含某个值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.includes(<span class="number">1</span>)  <span class="comment">//true</span></span><br><span class="line">arr.includes(<span class="number">5</span>)  <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="14-reduce-累加元素"><a href="#14-reduce-累加元素" class="headerlink" title="14.reduce() 累加元素"></a>14.reduce() 累加元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y   <span class="comment">//输出6 将数组元素累加</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="15-filter-数组过滤"><a href="#15-filter-数组过滤" class="headerlink" title="15.filter() 数组过滤"></a>15.filter() 数组过滤</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">3</span> <span class="comment">//输出[4,5] 返回新数组</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-push-向数组末尾添加元素&quot;&gt;&lt;a href=&quot;#1-push-向数组末尾添加元素&quot; class=&quot;headerlink&quot; title=&quot;1.push() 向数组末尾添加元素&quot;&gt;&lt;/a&gt;1.push() 向数组末尾添加元素&lt;/h3&gt;&lt;figure class
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>call apply bind区别</title>
    <link href="http://yoursite.com/2018/08/13/call-apply-bind%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2018/08/13/call-apply-bind区别/</id>
    <published>2018-08-13T02:58:01.000Z</published>
    <updated>2018-09-05T07:07:35.501Z</updated>
    
    <content type="html"><![CDATA[<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'小明'</span>,age=<span class="number">20</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name : <span class="string">'小红'</span>,</span><br><span class="line">        objage:<span class="keyword">this</span>.age,</span><br><span class="line">        myFun:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'年龄'</span>+<span class="keyword">this</span>.age)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">        age : <span class="number">30</span>,</span><br><span class="line">        name : <span class="string">'小兰'</span></span><br><span class="line">    &#125;</span><br><span class="line">obj.myFun.call(obj2) <span class="comment">//将obj的this改变为obj2 所以输出小兰年龄30</span></span><br><span class="line">obj.myFun.apply(obj2) <span class="comment">//同样是将obj的this改变为obj2 所以输出小兰年龄30</span></span><br><span class="line">obj.myFun.bind(obj2)()<span class="comment">//这个稍微有点不用，后边多了一个括号，因为bind返回的是一个函数，需要再次调用，同样是将this改为obj2</span></span><br></pre></td></tr></table></figure><h3 id="在看传参方式"><a href="#在看传参方式" class="headerlink" title="在看传参方式"></a>在看传参方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'小明'</span>,age=<span class="number">20</span></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name : <span class="string">'小红'</span>,</span><br><span class="line">        objage:<span class="keyword">this</span>.age,</span><br><span class="line">        myFun:<span class="function"><span class="keyword">function</span>(<span class="params">address,play</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'年龄'</span>+<span class="keyword">this</span>.age+<span class="string">'来自'</span>+address+<span class="string">'去过'</span>+play)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">        age : <span class="number">30</span>,</span><br><span class="line">        name : <span class="string">'小兰'</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//传参</span></span><br><span class="line">obj.myFun.call(obj2,<span class="string">'上海'</span>,<span class="string">'成都'</span>)   <span class="comment">//call传参方式就是以普通方式传入</span></span><br><span class="line">obj.myFun.apply(obj2,[<span class="string">'北京'</span>,<span class="string">'美国'</span>]) <span class="comment">//apply传参方式是以数组方式传入</span></span><br><span class="line">obj.myFun.bind(obj2,<span class="string">'深圳'</span>,<span class="string">'韩国'</span>)() <span class="comment">//bind传参方式就是以普通方式传入</span></span><br></pre></td></tr></table></figure><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>1.call、apply、bind第一个参数都是改变this指向</li><li>2.call、apply调用一次就可以，bind是需要再次调用</li><li>3.call、bind传参方式都是普通传入用逗号隔开就好，apply是传入数组</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js数组去重的几种方法</title>
    <link href="http://yoursite.com/2018/06/25/js%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/06/25/js数组去重的几种方法/</id>
    <published>2018-06-25T02:27:35.000Z</published>
    <updated>2018-09-05T07:07:35.502Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数组去重的几种方式"><a href="#数组去重的几种方式" class="headerlink" title="数组去重的几种方式"></a>数组去重的几种方式</h3><h4 id="方式1：利用indexOf-遍历数组去重的数组，根据indexOf去判断新数组有没有这个值-有的话就返回索引下标，没有的话就返回-1，如果没有就push到这个新数组中，最后将这个新数组返回实现去重"><a href="#方式1：利用indexOf-遍历数组去重的数组，根据indexOf去判断新数组有没有这个值-有的话就返回索引下标，没有的话就返回-1，如果没有就push到这个新数组中，最后将这个新数组返回实现去重" class="headerlink" title="方式1：利用indexOf 遍历数组去重的数组，根据indexOf去判断新数组有没有这个值,有的话就返回索引下标，没有的话就返回-1，如果没有就push到这个新数组中，最后将这个新数组返回实现去重"></a>方式1：利用indexOf 遍历数组去重的数组，根据indexOf去判断新数组有没有这个值,有的话就返回索引下标，没有的话就返回-1，如果没有就push到这个新数组中，最后将这个新数组返回实现去重</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delre</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ret.indexOf(arr[i]) === <span class="number">-1</span>)&#123;</span><br><span class="line">            ret.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(delre(arr))</span><br><span class="line">输出:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><h4 id="方式2：遍历数组，利用object对象保存数组值，判断数组值是否已经保存在object中，未保存则push到新数组并用object-arrayItem-1的方式记录保存"><a href="#方式2：遍历数组，利用object对象保存数组值，判断数组值是否已经保存在object中，未保存则push到新数组并用object-arrayItem-1的方式记录保存" class="headerlink" title="方式2：遍历数组，利用object对象保存数组值，判断数组值是否已经保存在object中，未保存则push到新数组并用object[arrayItem]=1的方式记录保存"></a>方式2：遍历数组，利用object对象保存数组值，判断数组值是否已经保存在object中，未保存则push到新数组并用object[arrayItem]=1的方式记录保存</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delre</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> ret = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!obj[arr[i]])&#123;</span><br><span class="line">            obj[arr[i]] = <span class="number">1</span></span><br><span class="line">            ret.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(delre(arr))</span><br><span class="line">输出:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><h4 id="方式3：数组下标判断法-遍历数组，利用indexOf判断元素的值是否与当前索引相等，如相等则加入"><a href="#方式3：数组下标判断法-遍历数组，利用indexOf判断元素的值是否与当前索引相等，如相等则加入" class="headerlink" title="方式3：数组下标判断法, 遍历数组，利用indexOf判断元素的值是否与当前索引相等，如相等则加入"></a>方式3：数组下标判断法, 遍历数组，利用indexOf判断元素的值是否与当前索引相等，如相等则加入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delre</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = []</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">e,i</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.indexOf(e)===i)&#123;</span><br><span class="line">            ret.push(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(delre(arr))</span><br><span class="line">输出:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><h4 id="方式4：Es6的set方法"><a href="#方式4：Es6的set方法" class="headerlink" title="方式4：Es6的set方法"></a>方式4：Es6的set方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delre</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = <span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(ret)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(delre(arr))</span><br><span class="line">输出:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><h4 id="方式5：嵌套循环依次比较"><a href="#方式5：嵌套循环依次比较" class="headerlink" title="方式5：嵌套循环依次比较"></a>方式5：嵌套循环依次比较</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delre</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] === arr[j])&#123;</span><br><span class="line">                arr.splice(j,<span class="number">1</span>)</span><br><span class="line">                j--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(delre(arr))</span><br><span class="line">输出:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数组去重的几种方式&quot;&gt;&lt;a href=&quot;#数组去重的几种方式&quot; class=&quot;headerlink&quot; title=&quot;数组去重的几种方式&quot;&gt;&lt;/a&gt;数组去重的几种方式&lt;/h3&gt;&lt;h4 id=&quot;方式1：利用indexOf-遍历数组去重的数组，根据indexOf去判断新
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js的循环机制</title>
    <link href="http://yoursite.com/2018/06/20/js%E7%9A%84%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2018/06/20/js的循环机制/</id>
    <published>2018-06-20T02:20:14.000Z</published>
    <updated>2018-09-05T07:07:35.502Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>大家都知道js是单线程的脚本语言，在同一时间，只能做同一件事，为了协调事件、用户交互、脚本、UI渲染和网络处理等行为，防止主线程阻塞</p><h3 id="为什么js是单线程？"><a href="#为什么js是单线程？" class="headerlink" title="为什么js是单线程？"></a>为什么js是单线程？</h3><p>js作为主要是运行在浏览器的脚本语言，js主要用途之一是操作DOM</p><p>如果js同时有两个线程，同时对同一个dom进行操作，这时浏览器应该听哪一个的线程的，如何判断优先级？<br>为了避免这个问题，js必须是一门单线程语言</p><h3 id="执行栈与任务队列"><a href="#执行栈与任务队列" class="headerlink" title="执行栈与任务队列"></a>执行栈与任务队列</h3><p>因为js是单线程语言，当遇到异步任务(如ajax操作时)，不可能一直等待异步任务完成，在继续往下执行，在这期间浏览器是空闲状态，显而易见这会导致巨大的资源浪费。</p><h3 id="执行栈"><a href="#执行栈" class="headerlink" title="执行栈"></a>执行栈</h3><p>当执行某个函数、用户点击一次鼠标，ajax完成，一个图片加载完成等事件发生时，只要指定过回调函数，这些事件发生就会进入执行栈队列中，等待主线程读取，遵循先进先出原则。</p><h3 id="主线程"><a href="#主线程" class="headerlink" title="主线程"></a>主线程</h3><p>要明确的一点是，主线程跟执行栈是不同概念，主线程规定现在执行执行栈中的哪个时间。</p><p>主线程循环：主线程会不停的从执行栈中读取时间，会执行完所有栈中的同步代码。<br>当遇到一个异步事件后，并不会一直等待异步事件返回结果，而是会将这个事件挂在与执行栈不同的队列中，我们称之为任务队列(Task Queue)。<br>当主线程将执行栈中所有的代码执行完之后，主线程将会去查看任务队列是否有任务，如果有，那么主线程会依次执行那些任务队列中的回调函数。</p><h3 id="js异步执行的运行机制"><a href="#js异步执行的运行机制" class="headerlink" title="js异步执行的运行机制"></a>js异步执行的运行机制</h3><ul><li>1.所有任务都在主线程上执行，形成一个执行栈</li><li>2.主线程之外，还存在一个’任务队列’(Task Queue)，只要异步任务有了运行结果，就在’任务队列’中放置一个事件</li><li>3.一旦’执行栈’中的所有同步任务执行完毕，系统就会读取’任务队列’，那些对应的任务结束等待状态，进入执行栈并开始执行</li><li>4.主线程不断重复上面的第三步</li></ul><h3 id="事件循环需要记住以下几点"><a href="#事件循环需要记住以下几点" class="headerlink" title="事件循环需要记住以下几点:"></a>事件循环需要记住以下几点:</h3><ul><li>事件队列严格按照时间先后顺序将任务压入执行栈执行</li><li>当执行栈为空时，浏览器会一直不停的检查事件队列，如果不为空，则取出第一个任务</li><li>在每一个任务结束之后，浏览器会对页面进行渲染</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;大家都知道js是单线程的脚本语言，在同一时间，只能做同一件事，为了协调事件、用户交互、脚本、UI渲染和网络处理等行为，防止主线程阻塞&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>清除浮动的几种方法</title>
    <link href="http://yoursite.com/2018/05/25/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/05/25/清除浮动的几种方法/</id>
    <published>2018-05-25T02:44:40.000Z</published>
    <updated>2018-09-05T07:07:35.504Z</updated>
    
    <content type="html"><![CDATA[<h3 id="清除浮动的几种方法"><a href="#清除浮动的几种方法" class="headerlink" title="清除浮动的几种方法"></a>清除浮动的几种方法</h3><h4 id="为什么要清除浮动呢请看如下代码"><a href="#为什么要清除浮动呢请看如下代码" class="headerlink" title="为什么要清除浮动呢请看如下代码:"></a>为什么要清除浮动呢请看如下代码:</h4><blockquote><p>html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">       <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> <span class="selector-class">.left</span>&#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">       <span class="attribute">background-color</span>: pink;</span><br><span class="line">       <span class="attribute">float</span>: left;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.right</span>&#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">       <span class="attribute">background-color</span>: red;</span><br><span class="line">       <span class="attribute">float</span>: right;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>我要让left和right两个div在box盒子里左右浮动，当然这样写没有什么毛病，但是两个盒子因为浮动的原因脱离了文档流，导致父元素box高度塌陷，不能被内容撑开，如下图：<br><img src="http://i2.bvimg.com/647072/7ff24b5aec6b8762.png" alt=""><br>这样我们已经看到了父元素的高度已经没有了，这就是我们清除浮动的原因了</p><h4 id="接下来我们看一下清除浮动的几种方法"><a href="#接下来我们看一下清除浮动的几种方法" class="headerlink" title="接下来我们看一下清除浮动的几种方法"></a>接下来我们看一下清除浮动的几种方法</h4><h5 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h5><p>在盒子里边添加一个元素添加设置.clear{clear:both;}样式</p><blockquote><p>html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: pink;</span><br><span class="line">      <span class="attribute">float</span>: left;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.right</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: red;</span><br><span class="line">      <span class="attribute">float</span>: right;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.clear</span>&#123;</span><br><span class="line">      <span class="attribute">clear</span>: both;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>效果图如下：<br><img src="http://i2.bvimg.com/647072/e1222ac3b63a5f0d.png" alt=""><br>达到了我们想要的效果</p><ul><li>原理：添加一个空div，利用css提高的clear:both清除浮动，让父级div能自动获取到高度</li><li>优点：简单，代码少，浏览器支持好，不容易出现怪问题</li><li>缺点：如果页面浮动布局多，就要增加很多空div，让人感觉很不爽</li><li>建议：不推荐使用，但此方法是以前主要使用的一种清除浮动方法</li></ul><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>给box父元素添加 overflow:hidden或者auto样式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">      <span class="attribute">overflow</span>:hidden;</span><br><span class="line">      zoom:1;      //兼容IE</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: pink;</span><br><span class="line">      <span class="attribute">float</span>: left;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.right</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: red;</span><br><span class="line">      <span class="attribute">float</span>: right;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当然效果图还是和上边一样的，父元素正常被撑开了</p><ul><li>原理：必须定义width或zoom:1，同时不能定义height，使用overflow:hidden时，浏览器会自动检查浮动区域的高度</li><li>优点：简单，代码少，浏览器支持好</li><li>缺点：不能和position配合使用，因为超出的尺寸的会被隐藏</li><li>建议：只推荐没有使用position或对overflow:hidden理解比较深的朋友使用</li></ul><h4 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h4><p>利用伪元素 box:after 来设置样式，清除浮动<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;        </span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">clear</span>: both;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">      <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: pink;</span><br><span class="line">      <span class="attribute">float</span>: left;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.right</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: red;</span><br><span class="line">      <span class="attribute">float</span>: right;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这样一样被撑开了</p><ul><li>原理：IE8以上和非IE浏览器才支持:after，原理和方法2有点类似，zoom(IE转有属性)可解决ie6,ie7浮动问题</li><li>优点：浏览器支持好，不容易出现怪问题（目前：大型网站都有使用，如：腾迅，网易，新浪等等）</li><li>缺点：代码多，要两句代码结合使用，才能让主流浏览器都支持</li><li>建议：推荐使用，建议定义公共类，以减少CSS代码</li></ul><h4 id="其实还有很多清除浮动的方法不过都没有什么优点比如："><a href="#其实还有很多清除浮动的方法不过都没有什么优点比如：" class="headerlink" title="其实还有很多清除浮动的方法不过都没有什么优点比如："></a>其实还有很多清除浮动的方法不过都没有什么优点比如：</h4><ul><li>让父元素盒子一起浮动，这样就导致他们成了一个整体，没有优点还会产生新的浮动问题</li><li>给父元素添加高度，但是这样高度就不能自适应了，当然也不太合适</li><li>将父元素设置为display:table，缺点未知</li><li>在这里还是推荐方法三</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;清除浮动的几种方法&quot;&gt;&lt;a href=&quot;#清除浮动的几种方法&quot; class=&quot;headerlink&quot; title=&quot;清除浮动的几种方法&quot;&gt;&lt;/a&gt;清除浮动的几种方法&lt;/h3&gt;&lt;h4 id=&quot;为什么要清除浮动呢请看如下代码&quot;&gt;&lt;a href=&quot;#为什么要清除浮动呢请
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>小程序request接口封装实例</title>
    <link href="http://yoursite.com/2018/05/23/%E5%B0%8F%E7%A8%8B%E5%BA%8Frequest%E6%8E%A5%E5%8F%A3%E5%B0%81%E8%A3%85%E5%AE%9E%E4%BE%8B/"/>
    <id>http://yoursite.com/2018/05/23/小程序request接口封装实例/</id>
    <published>2018-05-23T06:10:22.000Z</published>
    <updated>2018-09-05T07:07:35.503Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用Promise对小程序wx-request接口进行封装"><a href="#使用Promise对小程序wx-request接口进行封装" class="headerlink" title="使用Promise对小程序wx.request接口进行封装"></a>使用Promise对小程序wx.request接口进行封装</h3><h4 id="新建一个request-js文件，代码如下"><a href="#新建一个request-js文件，代码如下" class="headerlink" title="新建一个request.js文件，代码如下:"></a>新建一个request.js文件，代码如下:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//url 接口地址</span></span><br><span class="line"> <span class="comment">//method 请求方式 </span></span><br><span class="line"> <span class="comment">//data 要传给服务器端的数据  没有的话传个&#123;&#125;就可以</span></span><br><span class="line"> <span class="comment">//还需要别的在添加就ok</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url,method,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        wx.request(&#123;</span><br><span class="line">            url,</span><br><span class="line">            method,</span><br><span class="line">            data:&#123;data&#125;,</span><br><span class="line">            header: &#123;</span><br><span class="line">                <span class="string">'content-type'</span>: <span class="string">'application/json'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">                resolve(res)</span><br><span class="line">            &#125;,</span><br><span class="line">            fail:<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">                reject(error)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    request</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在文件中使用"><a href="#在文件中使用" class="headerlink" title="在文件中使用"></a>在文件中使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入封装好的request文件</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'文件路径'</span>)</span><br><span class="line"><span class="comment">//这里已post为例</span></span><br><span class="line">request.request(<span class="string">'url'</span>,<span class="string">'POST'</span>,data)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 请求成功函数</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .error(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//请求失败函数</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用Promise对小程序wx-request接口进行封装&quot;&gt;&lt;a href=&quot;#使用Promise对小程序wx-request接口进行封装&quot; class=&quot;headerlink&quot; title=&quot;使用Promise对小程序wx.request接口进行封装&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序实现下拉刷新和上拉加载</title>
    <link href="http://yoursite.com/2018/05/23/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E5%92%8C%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD/"/>
    <id>http://yoursite.com/2018/05/23/微信小程序实现下拉刷新和上拉加载/</id>
    <published>2018-05-23T03:42:43.000Z</published>
    <updated>2018-09-05T07:07:35.503Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h3><h4 id="下拉刷新两个步骤"><a href="#下拉刷新两个步骤" class="headerlink" title="下拉刷新两个步骤"></a>下拉刷新两个步骤</h4><ul><li><p>在要添加下拉刷新页面的json文件添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"enablePullDownRefresh"</span>:<span class="literal">true</span>        <span class="comment">//来开始下拉刷新</span></span><br></pre></td></tr></table></figure></li><li><p>添加背景颜色，不添加的话默认是白色，会与背景颜色相同，看不见icon</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"backgroundColor"</span>:<span class="string">"dark"</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="在要实现下拉刷新的页面添加下拉刷新函数"><a href="#在要实现下拉刷新的页面添加下拉刷新函数" class="headerlink" title="在要实现下拉刷新的页面添加下拉刷新函数"></a>在要实现下拉刷新的页面添加下拉刷新函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onPullDownRefresh() &#123;</span><br><span class="line">    wx.showNavigationBarLoading()       <span class="comment">//在标题栏中显示加载loading</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="下拉刷新完成之后调用如下函数来停止刷新"><a href="#下拉刷新完成之后调用如下函数来停止刷新" class="headerlink" title="下拉刷新完成之后调用如下函数来停止刷新"></a>下拉刷新完成之后调用如下函数来停止刷新</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onPullDownRefresh() &#123;</span><br><span class="line">    wx.showNavigationBarLoading()       <span class="comment">//在标题栏中显示加载loading</span></span><br><span class="line">    wx.stopPullDownRefresh()            <span class="comment">//停止刷新</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上拉加载"><a href="#上拉加载" class="headerlink" title="上拉加载"></a>上拉加载</h3><p>上垃加载主要是利用了js中的onReachBottom方法，它表示”页面上拉触底事件的处理函数”，我们就在这时请求服务器获取到对应数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onReachBottom:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//请求数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;下拉刷新&quot;&gt;&lt;a href=&quot;#下拉刷新&quot; class=&quot;headerlink&quot; title=&quot;下拉刷新&quot;&gt;&lt;/a&gt;下拉刷新&lt;/h3&gt;&lt;h4 id=&quot;下拉刷新两个步骤&quot;&gt;&lt;a href=&quot;#下拉刷新两个步骤&quot; class=&quot;headerlink&quot; title=&quot;下
      
    
    </summary>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>hexo多台电脑更新博客</title>
    <link href="http://yoursite.com/2018/05/22/hexo%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/05/22/hexo多台电脑更新博客/</id>
    <published>2018-05-22T08:37:02.000Z</published>
    <updated>2018-09-05T07:07:35.502Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><ul><li><label style="color:#b63650">hexo</label>生成的静态博客文件都是传到github上的，且默认放在master分支上，而配置文件都是放在本地的</li><li><label style="color:#b63650">hexo</label>(配置文件)都是可以放到hexo分支上(创建一个新的分支)，切换电脑时，直接git clone hexo分支</li></ul><h4 id="在xxx-github-io仓库下创建一个新的hexo分支"><a href="#在xxx-github-io仓库下创建一个新的hexo分支" class="headerlink" title="在xxx.github.io仓库下创建一个新的hexo分支"></a>在xxx.github.io仓库下创建一个新的hexo分支</h4><p>切换到hexo分支，并在<label style="color:#b63650">-&gt;Settings-&gt;Branches-&gt;Default branch</label>中将默认分支设置为hexo，save保存<br><img src="https://user-gold-cdn.xitu.io/2018/4/12/162b922ff0603fc4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><h4 id="克隆hexo分支到本地"><a href="#克隆hexo分支到本地" class="headerlink" title="克隆hexo分支到本地"></a>克隆hexo分支到本地</h4><ul><li>将新建的hexo分支克隆到本地，在终端中cd到xxx.github.io文件夹</li><li>使用<label style="color:#b63650">git branch</label>查看分支，应该默认是hexo</li></ul><h4 id="部署文件"><a href="#部署文件" class="headerlink" title="部署文件"></a>部署文件</h4><ul><li>将本地的hexo配置文件(全部文件)全部拷贝到xxx.github.io文件根目录下</li><li>安装需要用到的插件(可选)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-deployer-heroku --save</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line">npm install hexo-deployer-openshift --save</span><br><span class="line">npm install hexo-renderer-marked@<span class="number">0.2</span> --save</span><br><span class="line">npm install hexo-renderer-stylus@<span class="number">0.2</span> --save</span><br><span class="line">npm install hexo-generator-feed@<span class="number">1</span> --save</span><br><span class="line">npm install hexo-generator-sitemap@<span class="number">1</span> --save</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><ul><li>将文件全部提交到hexo分支</li><li>注意事项<br>  1.主题文件夹下边可能会有<label style="color:#b63650">.git</label>、<label style="color:#b63650">.github</label>隐藏文件夹，将文件删除在提交，不然可能会提交不上去</li></ul><blockquote><p>master分支和hexo分支各自保存着一个版本，master分支用于保存博客静态资源，提供博客页面供人访问；hexo分支用于备份博客部署文件，供自己维护更新，两者在一个GitHub仓库内也不会有任何冲突</p></blockquote><h3 id="在其他电脑更新博客"><a href="#在其他电脑更新博客" class="headerlink" title="在其他电脑更新博客"></a>在其他电脑更新博客</h3><ul><li>在新电脑克隆xxx.github.io仓库的hexo分支到本地</li><li>cd到xxx.github.io文件夹下，执行npm install </li><li>现在就可以在不同电脑下更新博客了</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;创建分支&quot;&gt;&lt;a href=&quot;#创建分支&quot; class=&quot;headerlink&quot; title=&quot;创建分支&quot;&gt;&lt;/a&gt;创建分支&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;label style=&quot;color:#b63650&quot;&gt;hexo&lt;/label&gt;生成的静态博客文件都是传到gi
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用github搭建hexo个人博客</title>
    <link href="http://yoursite.com/2018/05/22/%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/05/22/使用github搭建hexo个人博客/</id>
    <published>2018-05-22T03:53:49.000Z</published>
    <updated>2018-09-05T07:07:35.503Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>1.准备一个github账号，没有的话去<a href="https://github.com/" target="_blank" rel="noopener">github</a>注册</li><li>2.电脑安装node、git、npm</li></ul><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><ul><li>当node、git都安装完成之后，在终端运行如下命令：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure></li></ul><h3 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h3><ul><li>1.在电脑中新建一个空文件夹，名字随意，如MyBlog</li><li>2.cd到当前文件夹</li><li>3.在终端运行如下命令，生成模板<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></li></ul><h5 id="安装完模板应该会有一个package-json文件，执行如下命令安装依赖："><a href="#安装完模板应该会有一个package-json文件，执行如下命令安装依赖：" class="headerlink" title="安装完模板应该会有一个package.json文件，执行如下命令安装依赖："></a>安装完模板应该会有一个package.json文件，执行如下命令安装依赖：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h5 id="然后运行如下命令开始hexo服务器"><a href="#然后运行如下命令开始hexo服务器" class="headerlink" title="然后运行如下命令开始hexo服务器:"></a>然后运行如下命令开始hexo服务器:</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h5 id="输入http-localhost-4000-，应该就可以看到以下页面"><a href="#输入http-localhost-4000-，应该就可以看到以下页面" class="headerlink" title="输入http://localhost:4000/，应该就可以看到以下页面"></a>输入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，应该就可以看到以下页面</h5><p><img src="http://upload-images.jianshu.io/upload_images/4122543-dfe49f13bcfd743d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt=""></p><h3 id="关联github"><a href="#关联github" class="headerlink" title="关联github"></a>关联github</h3><h4 id="新建一个github仓库"><a href="#新建一个github仓库" class="headerlink" title="新建一个github仓库"></a>新建一个github仓库</h4><ul><li>在github上创建名字为XXX.github.io的项目，xxx必须是自己github账号的用户名</li></ul><h4 id="修改-fonfig-yml配置文件"><a href="#修改-fonfig-yml配置文件" class="headerlink" title="修改_fonfig.yml配置文件"></a>修改<label style="color:#b63650">_fonfig.yml</label>配置文件</h4><ul><li>1.打开本地MyBlog根目录下边的_fonfig.yml配置文件</li><li>2.将其中的type设置为git，repository是你github.io仓库的地址</li><li>3.每次个属性冒号后边都要加一个空格，不然会报错<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https:<span class="comment">//github.com/CoderTitan/CoderTitan.github.io.git</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ul><h4 id="将配置文件部署到github上"><a href="#将配置文件部署到github上" class="headerlink" title="将配置文件部署到github上"></a>将配置文件部署到github上</h4><ul><li>打开终端，cd到MyBlog文件夹下，执行如下命令</li></ul><h5 id="在MyBlog根目录下执行如下命令生成静态文件："><a href="#在MyBlog根目录下执行如下命令生成静态文件：" class="headerlink" title="在MyBlog根目录下执行如下命令生成静态文件："></a>在MyBlog根目录下执行如下命令生成静态文件：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate     或者：hexo g</span><br></pre></td></tr></table></figure><h5 id="此时若出现如下报错："><a href="#此时若出现如下报错：" class="headerlink" title="此时若出现如下报错："></a>此时若出现如下报错：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR Local hexo not found <span class="keyword">in</span> ~<span class="regexp">/blog</span></span><br><span class="line"><span class="regexp">ERROR Try runing: 'npm install hexo --save'</span></span><br></pre></td></tr></table></figure><h5 id="则执行命令："><a href="#则执行命令：" class="headerlink" title="则执行命令："></a>则执行命令：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo --save</span><br></pre></td></tr></table></figure><h5 id="再执行配置命令："><a href="#再执行配置命令：" class="headerlink" title="再执行配置命令："></a>再执行配置命令：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy           或者：hexo d</span><br></pre></td></tr></table></figure><h5 id="报错一-若执行命令hexo-deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git："><a href="#报错一-若执行命令hexo-deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git：" class="headerlink" title="报错一: 若执行命令hexo deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git："></a>报错一: 若执行命令hexo deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h5 id="报错二-若执行命令hexo-d报以下错误"><a href="#报错二-若执行命令hexo-d报以下错误" class="headerlink" title="报错二: 若执行命令hexo d报以下错误:"></a>报错二: 若执行命令hexo d报以下错误:</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR Plugin load failed: hexo-server</span><br><span class="line"><span class="comment">//或者类似的错误</span></span><br><span class="line">ERROR Plugin load failed: hexo-renderer-sass</span><br></pre></td></tr></table></figure><h5 id="则执行响应的命令"><a href="#则执行响应的命令" class="headerlink" title="则执行响应的命令:"></a>则执行响应的命令:</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-server</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">sudo npm install hexo-renderer-sass</span><br></pre></td></tr></table></figure><h5 id="最后执行："><a href="#最后执行：" class="headerlink" title="最后执行："></a>最后执行：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><ul><li>hexo d执行完成后，在浏览器打开<a href="http://xxx.github.io就能看到搭建好的博客了" target="_blank" rel="noopener">http://xxx.github.io就能看到搭建好的博客了</a></li></ul><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><ul><li>我们可以去<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方网站</a>下载主题</li><li>示例next</li></ul><h4 id="cd到MyBlog根目录下执行"><a href="#cd到MyBlog根目录下执行" class="headerlink" title="cd到MyBlog根目录下执行"></a>cd到MyBlog根目录下执行</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/theme-next/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure><p>下载的主题默认是在theme文件夹下，然后重新执行hexo g来生成</p><h4 id="每次部署文章的步骤"><a href="#每次部署文章的步骤" class="headerlink" title="每次部署文章的步骤"></a>每次部署文章的步骤</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean           <span class="comment">//清除缓存文件 (db.json) 和已生成的静态文件 (public)</span></span><br><span class="line"></span><br><span class="line">hexo g             <span class="comment">//生成缓存和静态文件</span></span><br><span class="line"> </span><br><span class="line">hexo d             <span class="comment">//重新部署到服务器</span></span><br></pre></td></tr></table></figure><h3 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h3><ul><li>现在使用的域名是Github提供的二级域名XXX.github.io，也可以绑定为自己的个性域名</li><li>可以到阿里万网购买，可以直接在网站做域名解析</li></ul><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>如果将域名指向一个域名，实现与被指向域名相同的访问效果，需要增加CNAME记录。登录万网，在你购买的域名后边点击：解析, 如下图<br><img src="http://upload-images.jianshu.io/upload_images/4122543-952aa0a8a84a089f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>进入解析页面后点击添加解析, 向你的 DNS 配置中添加 3 条记录, 如下图<br>注意CNAME记录添加的是username.github.io.(不要忘记后面的.), 可能最后一个点不显示(我的就不显示)<br><img src="http://upload-images.jianshu.io/upload_images/4122543-b2435667d603f844.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="设置github配置信息"><a href="#设置github配置信息" class="headerlink" title="设置github配置信息"></a>设置github配置信息</h3><ul><li>打开你的xxx.github.io项目地址，找到设置页面</li><li>滚动到下方找到github pages模块，在custom domain，输入你购买的域名，点击save保存</li></ul><h3 id="创建CNAME文件"><a href="#创建CNAME文件" class="headerlink" title="创建CNAME文件"></a>创建CNAME文件</h3><ul><li>在/MyBlog/themes/landscape/source目录下新建文件名为：CNAME文件，注意没有后缀名！直接将自己的域名写入</li><li>CNAME一定要大写</li><li>完成上述步骤后, 终端cd到MyBlog目录下执行如下命令重新部署：</li><li>最后, 等十分钟左右，刷新浏览器，用你自己域名访问下试试</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1.准备一个github账号，没有的话去&lt;a href=&quot;https://github.com/&quot; target
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
